/*
* generated by Xtext
*/
package org.xtext.example.mydsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.mydsl.services.PascalGrammarAccess;

public class PascalParser extends AbstractContentAssistParser {
	
	@Inject
	private PascalGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalPascalParser createParser() {
		org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalPascalParser result = new org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalPascalParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getRelational_operatorAccess().getAlternatives(), "rule__Relational_operator__Alternatives");
					put(grammarAccess.getAddition_operatorAccess().getAlternatives(), "rule__Addition_operator__Alternatives");
					put(grammarAccess.getMultiplication_operatorAccess().getAlternatives(), "rule__Multiplication_operator__Alternatives");
					put(grammarAccess.getEntire_variableAccess().getAlternatives(), "rule__Entire_variable__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getIdentifier2Access().getAlternatives(), "rule__Identifier2__Alternatives");
					put(grammarAccess.getScale_factorAccess().getAlternatives_0(), "rule__Scale_factor__Alternatives_0");
					put(grammarAccess.getSignAccess().getAlternatives(), "rule__Sign__Alternatives");
					put(grammarAccess.getLetterAccess().getAlternatives(), "rule__Letter__Alternatives");
					put(grammarAccess.getDigitAccess().getAlternatives(), "rule__Digit__Alternatives");
					put(grammarAccess.getGreetingAccess().getGroup(), "rule__Greeting__Group__0");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getProgram_headingAccess().getGroup(), "rule__Program_heading__Group__0");
					put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
					put(grammarAccess.getLabel_declaration_partAccess().getGroup(), "rule__Label_declaration_part__Group__0");
					put(grammarAccess.getLabel_declaration_partAccess().getGroup_2(), "rule__Label_declaration_part__Group_2__0");
					put(grammarAccess.getType_definitionAccess().getGroup(), "rule__Type_definition__Group__0");
					put(grammarAccess.getEnumerated_typeAccess().getGroup(), "rule__Enumerated_type__Group__0");
					put(grammarAccess.getIdentifierAccess().getGroup(), "rule__Identifier__Group__0");
					put(grammarAccess.getIdentifier_listAccess().getGroup(), "rule__Identifier_list__Group__0");
					put(grammarAccess.getIdentifier_listAccess().getGroup_1(), "rule__Identifier_list__Group_1__0");
					put(grammarAccess.getScale_factorAccess().getGroup(), "rule__Scale_factor__Group__0");
					put(grammarAccess.getUnsigned_digit_sequenceAccess().getGroup(), "rule__Unsigned_digit_sequence__Group__0");
					put(grammarAccess.getDigit_sequenceAccess().getGroup(), "rule__Digit_sequence__Group__0");
					put(grammarAccess.getModelAccess().getProgramsAssignment(), "rule__Model__ProgramsAssignment");
					put(grammarAccess.getGreetingAccess().getNameAssignment_1(), "rule__Greeting__NameAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalPascalParser typedParser = (org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalPascalParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public PascalGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(PascalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
