/*
* generated by Xtext
*/
package org.xtext.example.mydsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.mydsl.services.PascalGrammarAccess;

public class PascalParser extends AbstractContentAssistParser {
	
	@Inject
	private PascalGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalPascalParser createParser() {
		org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalPascalParser result = new org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalPascalParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getProcedure_and_function_declaration_partAccess().getAlternatives_0(), "rule__Procedure_and_function_declaration_part__Alternatives_0");
					put(grammarAccess.getRelational_operatorAccess().getAlternatives(), "rule__Relational_operator__Alternatives");
					put(grammarAccess.getAddition_operatorAccess().getAlternatives(), "rule__Addition_operator__Alternatives");
					put(grammarAccess.getMultiplication_operatorAccess().getAlternatives(), "rule__Multiplication_operator__Alternatives");
					put(grammarAccess.getEntire_variableAccess().getAlternatives(), "rule__Entire_variable__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getSimple_typeAccess().getAlternatives(), "rule__Simple_type__Alternatives");
					put(grammarAccess.getUnpacked_structured_typeAccess().getAlternatives(), "rule__Unpacked_structured_type__Alternatives");
					put(grammarAccess.getField_listAccess().getAlternatives_0(), "rule__Field_list__Alternatives_0");
					put(grammarAccess.getIdentifier2Access().getAlternatives_1(), "rule__Identifier2__Alternatives_1");
					put(grammarAccess.getNumberAccess().getAlternatives(), "rule__Number__Alternatives");
					put(grammarAccess.getReal_numberAccess().getAlternatives(), "rule__Real_number__Alternatives");
					put(grammarAccess.getScale_factorAccess().getAlternatives_0(), "rule__Scale_factor__Alternatives_0");
					put(grammarAccess.getSignAccess().getAlternatives(), "rule__Sign__Alternatives");
					put(grammarAccess.getConstantAccess().getAlternatives(), "rule__Constant__Alternatives");
					put(grammarAccess.getConstantAccess().getAlternatives_0_1(), "rule__Constant__Alternatives_0_1");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getProgram_headingAccess().getGroup(), "rule__Program_heading__Group__0");
					put(grammarAccess.getProgram_headingAccess().getGroup_2(), "rule__Program_heading__Group_2__0");
					put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
					put(grammarAccess.getDeclaration_partAccess().getGroup(), "rule__Declaration_part__Group__0");
					put(grammarAccess.getLabel_declaration_partAccess().getGroup(), "rule__Label_declaration_part__Group__0");
					put(grammarAccess.getLabel_declaration_partAccess().getGroup_2(), "rule__Label_declaration_part__Group_2__0");
					put(grammarAccess.getConstant_definition_partAccess().getGroup(), "rule__Constant_definition_part__Group__0");
					put(grammarAccess.getConstant_definition_partAccess().getGroup_3(), "rule__Constant_definition_part__Group_3__0");
					put(grammarAccess.getConstant_definitionAccess().getGroup(), "rule__Constant_definition__Group__0");
					put(grammarAccess.getType_definition_partAccess().getGroup(), "rule__Type_definition_part__Group__0");
					put(grammarAccess.getType_definition_partAccess().getGroup_3(), "rule__Type_definition_part__Group_3__0");
					put(grammarAccess.getType_definitionAccess().getGroup(), "rule__Type_definition__Group__0");
					put(grammarAccess.getVariable_declaration_partAccess().getGroup(), "rule__Variable_declaration_part__Group__0");
					put(grammarAccess.getVariable_declaration_partAccess().getGroup_3(), "rule__Variable_declaration_part__Group_3__0");
					put(grammarAccess.getVariable_declarationAccess().getGroup(), "rule__Variable_declaration__Group__0");
					put(grammarAccess.getProcedure_and_function_declaration_partAccess().getGroup(), "rule__Procedure_and_function_declaration_part__Group__0");
					put(grammarAccess.getStatement_partAccess().getGroup(), "rule__Statement_part__Group__0");
					put(grammarAccess.getStatement_sequenceAccess().getGroup(), "rule__Statement_sequence__Group__0");
					put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
					put(grammarAccess.getCase_label_listAccess().getGroup(), "rule__Case_label_list__Group__0");
					put(grammarAccess.getCase_label_listAccess().getGroup_1(), "rule__Case_label_list__Group_1__0");
					put(grammarAccess.getEnumerated_typeAccess().getGroup(), "rule__Enumerated_type__Group__0");
					put(grammarAccess.getSubrange_typeAccess().getGroup(), "rule__Subrange_type__Group__0");
					put(grammarAccess.getStructured_typeAccess().getGroup(), "rule__Structured_type__Group__0");
					put(grammarAccess.getArray_typeAccess().getGroup(), "rule__Array_type__Group__0");
					put(grammarAccess.getArray_typeAccess().getGroup_3(), "rule__Array_type__Group_3__0");
					put(grammarAccess.getRecord_typeAccess().getGroup(), "rule__Record_type__Group__0");
					put(grammarAccess.getSet_typeAccess().getGroup(), "rule__Set_type__Group__0");
					put(grammarAccess.getFile_typeAccess().getGroup(), "rule__File_type__Group__0");
					put(grammarAccess.getPointer_typeAccess().getGroup(), "rule__Pointer_type__Group__0");
					put(grammarAccess.getField_listAccess().getGroup(), "rule__Field_list__Group__0");
					put(grammarAccess.getField_listAccess().getGroup_0_0(), "rule__Field_list__Group_0_0__0");
					put(grammarAccess.getField_listAccess().getGroup_0_0_1(), "rule__Field_list__Group_0_0_1__0");
					put(grammarAccess.getFixed_partAccess().getGroup(), "rule__Fixed_part__Group__0");
					put(grammarAccess.getFixed_partAccess().getGroup_1(), "rule__Fixed_part__Group_1__0");
					put(grammarAccess.getRecord_sectionAccess().getGroup(), "rule__Record_section__Group__0");
					put(grammarAccess.getVariant_partAccess().getGroup(), "rule__Variant_part__Group__0");
					put(grammarAccess.getVariant_partAccess().getGroup_5(), "rule__Variant_part__Group_5__0");
					put(grammarAccess.getTag_fieldAccess().getGroup(), "rule__Tag_field__Group__0");
					put(grammarAccess.getVariantAccess().getGroup(), "rule__Variant__Group__0");
					put(grammarAccess.getIdentifier2Access().getGroup(), "rule__Identifier2__Group__0");
					put(grammarAccess.getIdentifier_listAccess().getGroup(), "rule__Identifier_list__Group__0");
					put(grammarAccess.getIdentifier_listAccess().getGroup_1(), "rule__Identifier_list__Group_1__0");
					put(grammarAccess.getReal_numberAccess().getGroup_0(), "rule__Real_number__Group_0__0");
					put(grammarAccess.getReal_numberAccess().getGroup_1(), "rule__Real_number__Group_1__0");
					put(grammarAccess.getScale_factorAccess().getGroup(), "rule__Scale_factor__Group__0");
					put(grammarAccess.getDigit_sequenceAccess().getGroup(), "rule__Digit_sequence__Group__0");
					put(grammarAccess.getConstantAccess().getGroup_0(), "rule__Constant__Group_0__0");
					put(grammarAccess.getModelAccess().getProgramsAssignment(), "rule__Model__ProgramsAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalPascalParser typedParser = (org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalPascalParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public PascalGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(PascalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
