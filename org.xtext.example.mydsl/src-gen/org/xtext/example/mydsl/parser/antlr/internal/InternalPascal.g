/*
* generated by Xtext
*/
grammar InternalPascal;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.PascalGrammarAccess;

}

@parser::members {

 	private PascalGrammarAccess grammarAccess;
 	
    public InternalPascalParser(TokenStream input, PascalGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected PascalGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getProgramsProgramParserRuleCall_0()); 
	    }
		lv_programs_0_0=ruleprogram		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"programs",
        		lv_programs_0_0, 
        		"program");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;







// Entry rule entryRuleprogram
entryRuleprogram returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); } 
	 iv_ruleprogram=ruleprogram 
	 { $current=$iv_ruleprogram.current.getText(); }  
	 EOF 
;

// Rule program
ruleprogram returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getProgramAccess().getProgram_headingParserRuleCall_0()); 
    }
    this_program_heading_0=ruleprogram_heading    {
		$current.merge(this_program_heading_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getProgramAccess().getBlockParserRuleCall_1()); 
    }
    this_block_1=ruleblock    {
		$current.merge(this_block_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgramAccess().getFullStopKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleprogram_heading
entryRuleprogram_heading returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgram_headingRule()); } 
	 iv_ruleprogram_heading=ruleprogram_heading 
	 { $current=$iv_ruleprogram_heading.current.getText(); }  
	 EOF 
;

// Rule program_heading
ruleprogram_heading returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='program' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgram_headingAccess().getProgramKeyword_0()); 
    }
    this_IDENTIFIER_1=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_1);
    }

    { 
    newLeafNode(this_IDENTIFIER_1, grammarAccess.getProgram_headingAccess().getIDENTIFIERTerminalRuleCall_1()); 
    }
(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgram_headingAccess().getLeftParenthesisKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getProgram_headingAccess().getIdentifier_listParserRuleCall_2_1()); 
    }
    this_identifier_list_3=ruleidentifier_list    {
		$current.merge(this_identifier_list_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgram_headingAccess().getRightParenthesisKeyword_2_2()); 
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgram_headingAccess().getSemicolonKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleblock
entryRuleblock returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); } 
	 iv_ruleblock=ruleblock 
	 { $current=$iv_ruleblock.current.getText(); }  
	 EOF 
;

// Rule block
ruleblock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBlockAccess().getDeclaration_partParserRuleCall_0()); 
    }
    this_declaration_part_0=ruledeclaration_part    {
		$current.merge(this_declaration_part_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getBlockAccess().getStatement_partParserRuleCall_1()); 
    }
    this_statement_part_1=rulestatement_part    {
		$current.merge(this_statement_part_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuledeclaration_part
entryRuledeclaration_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaration_partRule()); } 
	 iv_ruledeclaration_part=ruledeclaration_part 
	 { $current=$iv_ruledeclaration_part.current.getText(); }  
	 EOF 
;

// Rule declaration_part
ruledeclaration_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getDeclaration_partAccess().getLabel_declaration_partParserRuleCall_0()); 
    }
    this_label_declaration_part_0=rulelabel_declaration_part    {
		$current.merge(this_label_declaration_part_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getDeclaration_partAccess().getConstant_definition_partParserRuleCall_1()); 
    }
    this_constant_definition_part_1=ruleconstant_definition_part    {
		$current.merge(this_constant_definition_part_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getDeclaration_partAccess().getType_definition_partParserRuleCall_2()); 
    }
    this_type_definition_part_2=ruletype_definition_part    {
		$current.merge(this_type_definition_part_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getDeclaration_partAccess().getVariable_declaration_partParserRuleCall_3()); 
    }
    this_variable_declaration_part_3=rulevariable_declaration_part    {
		$current.merge(this_variable_declaration_part_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getDeclaration_partAccess().getProcedure_and_function_declaration_partParserRuleCall_4()); 
    }
    this_procedure_and_function_declaration_part_4=ruleprocedure_and_function_declaration_part    {
		$current.merge(this_procedure_and_function_declaration_part_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulelabel_declaration_part
entryRulelabel_declaration_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabel_declaration_partRule()); } 
	 iv_rulelabel_declaration_part=rulelabel_declaration_part 
	 { $current=$iv_rulelabel_declaration_part.current.getText(); }  
	 EOF 
;

// Rule label_declaration_part
rulelabel_declaration_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='label' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLabel_declaration_partAccess().getLabelKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getLabel_declaration_partAccess().getLabelParserRuleCall_1()); 
    }
    this_label_1=rulelabel    {
		$current.merge(this_label_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLabel_declaration_partAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getLabel_declaration_partAccess().getLabelParserRuleCall_2_1()); 
    }
    this_label_3=rulelabel    {
		$current.merge(this_label_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLabel_declaration_partAccess().getSemicolonKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleconstant_definition_part
entryRuleconstant_definition_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstant_definition_partRule()); } 
	 iv_ruleconstant_definition_part=ruleconstant_definition_part 
	 { $current=$iv_ruleconstant_definition_part.current.getText(); }  
	 EOF 
;

// Rule constant_definition_part
ruleconstant_definition_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='const' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstant_definition_partAccess().getConstKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getConstant_definition_partAccess().getConstant_definitionParserRuleCall_1()); 
    }
    this_constant_definition_1=ruleconstant_definition    {
		$current.merge(this_constant_definition_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstant_definition_partAccess().getSemicolonKeyword_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getConstant_definition_partAccess().getConstant_definitionParserRuleCall_3_0()); 
    }
    this_constant_definition_3=ruleconstant_definition    {
		$current.merge(this_constant_definition_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstant_definition_partAccess().getSemicolonKeyword_3_1()); 
    }
)*)
    ;





// Entry rule entryRuleconstant_definition
entryRuleconstant_definition returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstant_definitionRule()); } 
	 iv_ruleconstant_definition=ruleconstant_definition 
	 { $current=$iv_ruleconstant_definition.current.getText(); }  
	 EOF 
;

// Rule constant_definition
ruleconstant_definition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getConstant_definitionAccess().getIDENTIFIERTerminalRuleCall_0()); 
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstant_definitionAccess().getEqualsSignKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getConstant_definitionAccess().getConstantParserRuleCall_2()); 
    }
    this_constant_2=ruleconstant    {
		$current.merge(this_constant_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuletype_definition_part
entryRuletype_definition_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getType_definition_partRule()); } 
	 iv_ruletype_definition_part=ruletype_definition_part 
	 { $current=$iv_ruletype_definition_part.current.getText(); }  
	 EOF 
;

// Rule type_definition_part
ruletype_definition_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='type' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_definition_partAccess().getTypeKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getType_definition_partAccess().getType_definitionParserRuleCall_1()); 
    }
    this_type_definition_1=ruletype_definition    {
		$current.merge(this_type_definition_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_definition_partAccess().getSemicolonKeyword_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getType_definition_partAccess().getType_definitionParserRuleCall_3_0()); 
    }
    this_type_definition_3=ruletype_definition    {
		$current.merge(this_type_definition_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_definition_partAccess().getSemicolonKeyword_3_1()); 
    }
)*)
    ;





// Entry rule entryRuletype_definition
entryRuletype_definition returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getType_definitionRule()); } 
	 iv_ruletype_definition=ruletype_definition 
	 { $current=$iv_ruletype_definition.current.getText(); }  
	 EOF 
;

// Rule type_definition
ruletype_definition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getType_definitionAccess().getIDENTIFIERTerminalRuleCall_0()); 
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_definitionAccess().getEqualsSignKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getType_definitionAccess().getTypeParserRuleCall_2()); 
    }
    this_type_2=ruletype    {
		$current.merge(this_type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulevariable_declaration_part
entryRulevariable_declaration_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariable_declaration_partRule()); } 
	 iv_rulevariable_declaration_part=rulevariable_declaration_part 
	 { $current=$iv_rulevariable_declaration_part.current.getText(); }  
	 EOF 
;

// Rule variable_declaration_part
rulevariable_declaration_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='var' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_declaration_partAccess().getVarKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariable_declaration_partAccess().getVariable_declarationParserRuleCall_1()); 
    }
    this_variable_declaration_1=rulevariable_declaration    {
		$current.merge(this_variable_declaration_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_declaration_partAccess().getSemicolonKeyword_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getVariable_declaration_partAccess().getVariable_declarationParserRuleCall_3_0()); 
    }
    this_variable_declaration_3=rulevariable_declaration    {
		$current.merge(this_variable_declaration_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_declaration_partAccess().getSemicolonKeyword_3_1()); 
    }
)*)
    ;





// Entry rule entryRulevariable_declaration
entryRulevariable_declaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariable_declarationRule()); } 
	 iv_rulevariable_declaration=rulevariable_declaration 
	 { $current=$iv_rulevariable_declaration.current.getText(); }  
	 EOF 
;

// Rule variable_declaration
rulevariable_declaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVariable_declarationAccess().getIdentifier_listParserRuleCall_0()); 
    }
    this_identifier_list_0=ruleidentifier_list    {
		$current.merge(this_identifier_list_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_declarationAccess().getColonKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariable_declarationAccess().getTypeParserRuleCall_2()); 
    }
    this_type_2=ruletype    {
		$current.merge(this_type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleprocedure_and_function_declaration_part
entryRuleprocedure_and_function_declaration_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedure_and_function_declaration_partRule()); } 
	 iv_ruleprocedure_and_function_declaration_part=ruleprocedure_and_function_declaration_part 
	 { $current=$iv_ruleprocedure_and_function_declaration_part.current.getText(); }  
	 EOF 
;

// Rule procedure_and_function_declaration_part
ruleprocedure_and_function_declaration_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='procedure_declaration' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProcedure_and_function_declaration_partAccess().getProcedure_declarationKeyword_0_0()); 
    }

    |
	kw='function_declaration' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProcedure_and_function_declaration_partAccess().getFunction_declarationKeyword_0_1()); 
    }
)
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProcedure_and_function_declaration_partAccess().getSemicolonKeyword_1()); 
    }
)*
    ;





// Entry rule entryRulestatement_part
entryRulestatement_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_partRule()); } 
	 iv_rulestatement_part=rulestatement_part 
	 { $current=$iv_rulestatement_part.current.getText(); }  
	 EOF 
;

// Rule statement_part
rulestatement_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='begin' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatement_partAccess().getBeginKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getStatement_partAccess().getStatement_sequenceParserRuleCall_1()); 
    }
    this_statement_sequence_1=rulestatement_sequence    {
		$current.merge(this_statement_sequence_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='end' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatement_partAccess().getEndKeyword_2()); 
    }
)
    ;





// Entry rule entryRulestatement_sequence
entryRulestatement_sequence returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_sequenceRule()); } 
	 iv_rulestatement_sequence=rulestatement_sequence 
	 { $current=$iv_rulestatement_sequence.current.getText(); }  
	 EOF 
;

// Rule statement_sequence
rulestatement_sequence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatement_sequenceAccess().getStatementParserRuleCall_0()); 
    }
    this_statement_0=rulestatement    {
		$current.merge(this_statement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getStatement_sequenceAccess().getStatementParserRuleCall_1()); 
    }
    this_statement_1=rulestatement    {
		$current.merge(this_statement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRulestatement
entryRulestatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); } 
	 iv_rulestatement=rulestatement 
	 { $current=$iv_rulestatement.current.getText(); }  
	 EOF 
;

// Rule statement
rulestatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='statement' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getStatementKeyword_0()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getSemicolonKeyword_1()); 
    }
)
    ;













// Entry rule entryRuletype
entryRuletype returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); } 
	 iv_ruletype=ruletype 
	 { $current=$iv_ruletype.current.getText(); }  
	 EOF 
;

// Rule type
ruletype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='simple_type' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getSimple_typeKeyword_0()); 
    }

    |
	kw='structured_type' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getStructured_typeKeyword_1()); 
    }

    |
	kw='pointer_type' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getPointer_typeKeyword_2()); 
    }

    |
	kw='type_identifier' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getType_identifierKeyword_3()); 
    }
)
    ;









// Entry rule entryRulefield_identifier
entryRulefield_identifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getField_identifierRule()); } 
	 iv_rulefield_identifier=rulefield_identifier 
	 { $current=$iv_rulefield_identifier.current.getText(); }  
	 EOF 
;

// Rule field_identifier
rulefield_identifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getField_identifierAccess().getIDENTIFIERTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleconstant_identifier
entryRuleconstant_identifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstant_identifierRule()); } 
	 iv_ruleconstant_identifier=ruleconstant_identifier 
	 { $current=$iv_ruleconstant_identifier.current.getText(); }  
	 EOF 
;

// Rule constant_identifier
ruleconstant_identifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getConstant_identifierAccess().getIDENTIFIERTerminalRuleCall()); 
    }

    ;





// Entry rule entryRulevariable_identifier
entryRulevariable_identifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariable_identifierRule()); } 
	 iv_rulevariable_identifier=rulevariable_identifier 
	 { $current=$iv_rulevariable_identifier.current.getText(); }  
	 EOF 
;

// Rule variable_identifier
rulevariable_identifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getVariable_identifierAccess().getIDENTIFIERTerminalRuleCall()); 
    }

    ;













// Entry rule entryRuleidentifier_list
entryRuleidentifier_list returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifier_listRule()); } 
	 iv_ruleidentifier_list=ruleidentifier_list 
	 { $current=$iv_ruleidentifier_list.current.getText(); }  
	 EOF 
;

// Rule identifier_list
ruleidentifier_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifier_listAccess().getIDENTIFIERTerminalRuleCall_0()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdentifier_listAccess().getCommaKeyword_1_0()); 
    }
    this_IDENTIFIER_2=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_2);
    }

    { 
    newLeafNode(this_IDENTIFIER_2, grammarAccess.getIdentifier_listAccess().getIDENTIFIERTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRulenumber
entryRulenumber returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); } 
	 iv_rulenumber=rulenumber 
	 { $current=$iv_rulenumber.current.getText(); }  
	 EOF 
;

// Rule number
rulenumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumberAccess().getInteger_numberParserRuleCall_0()); 
    }
    this_integer_number_0=ruleinteger_number    {
		$current.merge(this_integer_number_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberAccess().getReal_numberParserRuleCall_1()); 
    }
    this_real_number_1=rulereal_number    {
		$current.merge(this_real_number_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleinteger_number
entryRuleinteger_number returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInteger_numberRule()); } 
	 iv_ruleinteger_number=ruleinteger_number 
	 { $current=$iv_ruleinteger_number.current.getText(); }  
	 EOF 
;

// Rule integer_number
ruleinteger_number returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getInteger_numberAccess().getDigit_sequenceParserRuleCall()); 
    }
    this_digit_sequence_0=ruledigit_sequence    {
		$current.merge(this_digit_sequence_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulereal_number
entryRulereal_number returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getReal_numberRule()); } 
	 iv_rulereal_number=rulereal_number 
	 { $current=$iv_rulereal_number.current.getText(); }  
	 EOF 
;

// Rule real_number
rulereal_number returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getReal_numberAccess().getDigit_sequenceParserRuleCall_0_0()); 
    }
    this_digit_sequence_0=ruledigit_sequence    {
		$current.merge(this_digit_sequence_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReal_numberAccess().getFullStopKeyword_0_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getReal_numberAccess().getUnsigned_digit_sequenceParserRuleCall_0_2()); 
    }
    this_unsigned_digit_sequence_2=ruleunsigned_digit_sequence    {
		$current.merge(this_unsigned_digit_sequence_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getReal_numberAccess().getScale_factorParserRuleCall_0_3()); 
    }
    this_scale_factor_3=rulescale_factor    {
		$current.merge(this_scale_factor_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getReal_numberAccess().getDigit_sequenceParserRuleCall_1_0()); 
    }
    this_digit_sequence_4=ruledigit_sequence    {
		$current.merge(this_digit_sequence_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getReal_numberAccess().getScale_factorParserRuleCall_1_1()); 
    }
    this_scale_factor_5=rulescale_factor    {
		$current.merge(this_scale_factor_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRulescale_factor
entryRulescale_factor returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getScale_factorRule()); } 
	 iv_rulescale_factor=rulescale_factor 
	 { $current=$iv_rulescale_factor.current.getText(); }  
	 EOF 
;

// Rule scale_factor
rulescale_factor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getScale_factorAccess().getEKeyword_0_0()); 
    }

    |
	kw='e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getScale_factorAccess().getEKeyword_0_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getScale_factorAccess().getDigit_sequenceParserRuleCall_1()); 
    }
    this_digit_sequence_2=ruledigit_sequence    {
		$current.merge(this_digit_sequence_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleunsigned_digit_sequence
entryRuleunsigned_digit_sequence returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnsigned_digit_sequenceRule()); } 
	 iv_ruleunsigned_digit_sequence=ruleunsigned_digit_sequence 
	 { $current=$iv_ruleunsigned_digit_sequence.current.getText(); }  
	 EOF 
;

// Rule unsigned_digit_sequence
ruleunsigned_digit_sequence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_DIGIT_0=RULE_DIGIT    {
		$current.merge(this_DIGIT_0);
    }

    { 
    newLeafNode(this_DIGIT_0, grammarAccess.getUnsigned_digit_sequenceAccess().getDIGITTerminalRuleCall_0()); 
    }
(    this_DIGIT_1=RULE_DIGIT    {
		$current.merge(this_DIGIT_1);
    }

    { 
    newLeafNode(this_DIGIT_1, grammarAccess.getUnsigned_digit_sequenceAccess().getDIGITTerminalRuleCall_1()); 
    }
)*)
    ;





// Entry rule entryRuledigit_sequence
entryRuledigit_sequence returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDigit_sequenceRule()); } 
	 iv_ruledigit_sequence=ruledigit_sequence 
	 { $current=$iv_ruledigit_sequence.current.getText(); }  
	 EOF 
;

// Rule digit_sequence
ruledigit_sequence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getDigit_sequenceAccess().getSignParserRuleCall_0()); 
    }
    this_sign_0=rulesign    {
		$current.merge(this_sign_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getDigit_sequenceAccess().getUnsigned_digit_sequenceParserRuleCall_1()); 
    }
    this_unsigned_digit_sequence_1=ruleunsigned_digit_sequence    {
		$current.merge(this_unsigned_digit_sequence_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulesign
entryRulesign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignRule()); } 
	 iv_rulesign=rulesign 
	 { $current=$iv_rulesign.current.getText(); }  
	 EOF 
;

// Rule sign
rulesign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRulelabel
entryRulelabel returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabelRule()); } 
	 iv_rulelabel=rulelabel 
	 { $current=$iv_rulelabel.current.getText(); }  
	 EOF 
;

// Rule label
rulelabel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getLabelAccess().getInteger_numberParserRuleCall()); 
    }
    this_integer_number_0=ruleinteger_number    {
		$current.merge(this_integer_number_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleconstant
entryRuleconstant returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); } 
	 iv_ruleconstant=ruleconstant 
	 { $current=$iv_ruleconstant.current.getText(); }  
	 EOF 
;

// Rule constant
ruleconstant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getSignParserRuleCall_0_0()); 
    }
    this_sign_0=rulesign    {
		$current.merge(this_sign_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getConstant_identifierParserRuleCall_0_1_0()); 
    }
    this_constant_identifier_1=ruleconstant_identifier    {
		$current.merge(this_constant_identifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getNumberParserRuleCall_0_1_1()); 
    }
    this_number_2=rulenumber    {
		$current.merge(this_number_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    |    this_STRING_3=RULE_STRING    {
		$current.merge(this_STRING_3);
    }

    { 
    newLeafNode(this_STRING_3, grammarAccess.getConstantAccess().getSTRINGTerminalRuleCall_1()); 
    }
)
    ;





RULE_IDENTIFIER : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_LETTER : ('a'..'z'|'A'..'Z');

RULE_DIGIT : '0'..'9';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


