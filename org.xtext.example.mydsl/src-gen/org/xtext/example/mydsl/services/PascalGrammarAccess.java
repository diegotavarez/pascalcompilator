/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PascalGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cProgramsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProgramsProgramParserRuleCall_0 = (RuleCall)cProgramsAssignment.eContents().get(0);
		
		//Model:
		//	programs+=program*;
		public ParserRule getRule() { return rule; }

		//programs+=program*
		public Assignment getProgramsAssignment() { return cProgramsAssignment; }

		//program
		public RuleCall getProgramsProgramParserRuleCall_0() { return cProgramsProgramParserRuleCall_0; }
	}

	public class GreetingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Greeting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHelloKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Greeting:
		//	"Hello" name=ID "!";
		public ParserRule getRule() { return rule; }

		//"Hello" name=ID "!"
		public Group getGroup() { return cGroup; }

		//"Hello"
		public Keyword getHelloKeyword_0() { return cHelloKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
	}

	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cProgram_headingParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////PROGRAMS AND BLOCKS
		//program:
		//	program_heading block ".";
		public ParserRule getRule() { return rule; }

		//program_heading block "."
		public Group getGroup() { return cGroup; }

		//program_heading
		public RuleCall getProgram_headingParserRuleCall_0() { return cProgram_headingParserRuleCall_0; }

		//block
		public RuleCall getBlockParserRuleCall_1() { return cBlockParserRuleCall_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}

	public class Program_headingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "program_heading");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIdentifier_listParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//program_heading:
		//	"program" IDENTIFIER ("(" identifier_list ")")? ";";
		public ParserRule getRule() { return rule; }

		//"program" IDENTIFIER ("(" identifier_list ")")? ";"
		public Group getGroup() { return cGroup; }

		//"program"
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }

		//("(" identifier_list ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//identifier_list
		public RuleCall getIdentifier_listParserRuleCall_2_1() { return cIdentifier_listParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDeclaration_partParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cStatement_partParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//block:
		//	declaration_part statement_part;
		public ParserRule getRule() { return rule; }

		//declaration_part statement_part
		public Group getGroup() { return cGroup; }

		//declaration_part
		public RuleCall getDeclaration_partParserRuleCall_0() { return cDeclaration_partParserRuleCall_0; }

		//statement_part
		public RuleCall getStatement_partParserRuleCall_1() { return cStatement_partParserRuleCall_1; }
	}

	public class Declaration_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "declaration_part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLabel_declaration_partParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cConstant_definition_partParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cType_definition_partParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cVariable_declaration_partParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cProcedure_and_function_declaration_partParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//declaration_part:
		//	label_declaration_part? constant_definition_part? type_definition_part? variable_declaration_part?
		//	procedure_and_function_declaration_part;
		public ParserRule getRule() { return rule; }

		//label_declaration_part? constant_definition_part? type_definition_part? variable_declaration_part?
		//procedure_and_function_declaration_part
		public Group getGroup() { return cGroup; }

		//label_declaration_part?
		public RuleCall getLabel_declaration_partParserRuleCall_0() { return cLabel_declaration_partParserRuleCall_0; }

		//constant_definition_part?
		public RuleCall getConstant_definition_partParserRuleCall_1() { return cConstant_definition_partParserRuleCall_1; }

		//type_definition_part?
		public RuleCall getType_definition_partParserRuleCall_2() { return cType_definition_partParserRuleCall_2; }

		//variable_declaration_part?
		public RuleCall getVariable_declaration_partParserRuleCall_3() { return cVariable_declaration_partParserRuleCall_3; }

		//procedure_and_function_declaration_part
		public RuleCall getProcedure_and_function_declaration_partParserRuleCall_4() { return cProcedure_and_function_declaration_partParserRuleCall_4; }
	}

	public class Label_declaration_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "label_declaration_part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//label_declaration_part:
		//	"label" label ("," label)* ";";
		public ParserRule getRule() { return rule; }

		//"label" label ("," label)* ";"
		public Group getGroup() { return cGroup; }

		//"label"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }

		//("," label)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//label
		public RuleCall getLabelParserRuleCall_2_1() { return cLabelParserRuleCall_2_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class Constant_definition_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constant_definition_part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cConstant_definitionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cConstant_definitionParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//constant_definition_part:
		//	"const" constant_definition ";" (constant_definition ";")*;
		public ParserRule getRule() { return rule; }

		//"const" constant_definition ";" (constant_definition ";")*
		public Group getGroup() { return cGroup; }

		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }

		//constant_definition
		public RuleCall getConstant_definitionParserRuleCall_1() { return cConstant_definitionParserRuleCall_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//(constant_definition ";")*
		public Group getGroup_3() { return cGroup_3; }

		//constant_definition
		public RuleCall getConstant_definitionParserRuleCall_3_0() { return cConstant_definitionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}

	public class Constant_definitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constant_definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//constant_definition:
		//	IDENTIFIER "=" constant;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER "=" constant
		public Group getGroup() { return cGroup; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//constant
		public RuleCall getConstantParserRuleCall_2() { return cConstantParserRuleCall_2; }
	}

	public class Type_definition_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type_definition_part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cType_definitionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cType_definitionParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//type_definition_part:
		//	"type" type_definition ";" (type_definition ";")*;
		public ParserRule getRule() { return rule; }

		//"type" type_definition ";" (type_definition ";")*
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//type_definition
		public RuleCall getType_definitionParserRuleCall_1() { return cType_definitionParserRuleCall_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//(type_definition ";")*
		public Group getGroup_3() { return cGroup_3; }

		//type_definition
		public RuleCall getType_definitionParserRuleCall_3_0() { return cType_definitionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}

	public class Type_definitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type_definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//type_definition:
		//	IDENTIFIER "=" type;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER "=" type
		public Group getGroup() { return cGroup; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
	}

	public class Variable_declaration_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variable_declaration_part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cVariable_declarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cVariable_declarationParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//variable_declaration_part:
		//	"var" variable_declaration ";" (variable_declaration ";")*;
		public ParserRule getRule() { return rule; }

		//"var" variable_declaration ";" (variable_declaration ";")*
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//variable_declaration
		public RuleCall getVariable_declarationParserRuleCall_1() { return cVariable_declarationParserRuleCall_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//(variable_declaration ";")*
		public Group getGroup_3() { return cGroup_3; }

		//variable_declaration
		public RuleCall getVariable_declarationParserRuleCall_3_0() { return cVariable_declarationParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}

	public class Variable_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variable_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifier_listParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//variable_declaration:
		//	identifier_list ":" type;
		public ParserRule getRule() { return rule; }

		//identifier_list ":" type
		public Group getGroup() { return cGroup; }

		//identifier_list
		public RuleCall getIdentifier_listParserRuleCall_0() { return cIdentifier_listParserRuleCall_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
	}

	public class Procedure_and_function_declaration_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "procedure_and_function_declaration_part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cProcedure_declarationKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cFunction_declarationKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//procedure_and_function_declaration_part:
		//	(("procedure_declaration" | "function_declaration") ";")*;
		public ParserRule getRule() { return rule; }

		//(("procedure_declaration" | "function_declaration") ";")*
		public Group getGroup() { return cGroup; }

		//"procedure_declaration" | "function_declaration"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"procedure_declaration"
		public Keyword getProcedure_declarationKeyword_0_0() { return cProcedure_declarationKeyword_0_0; }

		//"function_declaration"
		public Keyword getFunction_declarationKeyword_0_1() { return cFunction_declarationKeyword_0_1; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class Statement_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement_part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStatement_sequenceParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cEndKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//statement_part:
		//	"begin" statement_sequence "end";
		public ParserRule getRule() { return rule; }

		//"begin" statement_sequence "end"
		public Group getGroup() { return cGroup; }

		//"begin"
		public Keyword getBeginKeyword_0() { return cBeginKeyword_0; }

		//statement_sequence
		public RuleCall getStatement_sequenceParserRuleCall_1() { return cStatement_sequenceParserRuleCall_1; }

		//"end"
		public Keyword getEndKeyword_2() { return cEndKeyword_2; }
	}

	public class Statement_sequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement_sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cStatementParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////STATEMENTS
		//statement_sequence:
		//	statement statement*;
		public ParserRule getRule() { return rule; }

		//statement statement*
		public Group getGroup() { return cGroup; }

		//statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }

		//statement*
		public RuleCall getStatementParserRuleCall_1() { return cStatementParserRuleCall_1; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//statement:
		//	"statement" ";";
		public ParserRule getRule() { return rule; }

		//"statement" ";"
		public Group getGroup() { return cGroup; }

		//"statement"
		public Keyword getStatementKeyword_0() { return cStatementKeyword_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class Relational_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "relational_operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cInKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		////EXPRESSIONS
		//relational_operator:
		//	"=" | "<>" | "<" | "<=" | ">" | ">=" | "in";
		public ParserRule getRule() { return rule; }

		//"=" | "<>" | "<" | "<=" | ">" | ">=" | "in"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_1() { return cLessThanSignGreaterThanSignKeyword_1; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_5() { return cGreaterThanSignEqualsSignKeyword_5; }

		//"in"
		public Keyword getInKeyword_6() { return cInKeyword_6; }
	}

	public class Addition_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "addition_operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOrKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//addition_operator:
		//	"+" | "-" | "or";
		public ParserRule getRule() { return rule; }

		//"+" | "-" | "or"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"or"
		public Keyword getOrKeyword_2() { return cOrKeyword_2; }
	}

	public class Multiplication_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "multiplication_operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDivKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cModKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAndKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//multiplication_operator:
		//	"*" | "/" | "div" | "mod" | "and";
		public ParserRule getRule() { return rule; }

		//"*" | "/" | "div" | "mod" | "and"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//"div"
		public Keyword getDivKeyword_2() { return cDivKeyword_2; }

		//"mod"
		public Keyword getModKeyword_3() { return cModKeyword_3; }

		//"and"
		public Keyword getAndKeyword_4() { return cAndKeyword_4; }
	}

	public class Entire_variableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "entire_variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariable_identifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cField_identifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//entire_variable:
		//	variable_identifier | field_identifier;
		public ParserRule getRule() { return rule; }

		//variable_identifier | field_identifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//variable_identifier
		public RuleCall getVariable_identifierParserRuleCall_0() { return cVariable_identifierParserRuleCall_0; }

		//field_identifier
		public RuleCall getField_identifierParserRuleCall_1() { return cField_identifierParserRuleCall_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSimple_typeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStructured_typeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPointer_typeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cType_identifierKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		////TYPES
		//type:
		//	"simple_type" | "structured_type" | "pointer_type" | "type_identifier";
		public ParserRule getRule() { return rule; }

		//"simple_type" | "structured_type" | "pointer_type" | "type_identifier"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"simple_type"
		public Keyword getSimple_typeKeyword_0() { return cSimple_typeKeyword_0; }

		//"structured_type"
		public Keyword getStructured_typeKeyword_1() { return cStructured_typeKeyword_1; }

		//"pointer_type"
		public Keyword getPointer_typeKeyword_2() { return cPointer_typeKeyword_2; }

		//"type_identifier"
		public Keyword getType_identifierKeyword_3() { return cType_identifierKeyword_3; }
	}

	public class Enumerated_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "enumerated_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIdentifier_listParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//enumerated_type:
		//	"(" identifier_list ")";
		public ParserRule getRule() { return rule; }

		//"(" identifier_list ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//identifier_list
		public RuleCall getIdentifier_listParserRuleCall_1() { return cIdentifier_listParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class Identifier2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "identifier2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cDIGITTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//identifier2:
		//	LETTER (LETTER | DIGIT)*;
		public ParserRule getRule() { return rule; }

		//LETTER (LETTER | DIGIT)*
		public Group getGroup() { return cGroup; }

		//LETTER
		public RuleCall getLETTERTerminalRuleCall_0() { return cLETTERTerminalRuleCall_0; }

		//(LETTER | DIGIT)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//LETTER
		public RuleCall getLETTERTerminalRuleCall_1_0() { return cLETTERTerminalRuleCall_1_0; }

		//DIGIT
		public RuleCall getDIGITTerminalRuleCall_1_1() { return cDIGITTerminalRuleCall_1_1; }
	}

	public class Field_identifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "field_identifier");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//field_identifier:
		//	IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}

	public class Constant_identifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constant_identifier");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//constant_identifier:
		//	IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}

	public class Variable_identifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variable_identifier");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//variable_identifier:
		//	IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}

	public class Type_identifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type_identifier");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//type_identifier:
		//	IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}

	public class Procedure_identifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "procedure_identifier");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//procedure_identifier:
		//	IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}

	public class Function_identifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "function_identifier");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//function_identifier:
		//	IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}

	public class Bound_identifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bound_identifier");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//bound_identifier:
		//	IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}

	public class Identifier_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "identifier_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////LOW LEVEL DEFINITIONS
		//identifier_list:
		//	IDENTIFIER ("," IDENTIFIER)*;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER ("," IDENTIFIER)*
		public Group getGroup() { return cGroup; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }

		//("," IDENTIFIER)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1_1() { return cIDENTIFIERTerminalRuleCall_1_1; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInteger_numberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReal_numberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//number:
		//	integer_number | real_number;
		public ParserRule getRule() { return rule; }

		//integer_number | real_number
		public Alternatives getAlternatives() { return cAlternatives; }

		//integer_number
		public RuleCall getInteger_numberParserRuleCall_0() { return cInteger_numberParserRuleCall_0; }

		//real_number
		public RuleCall getReal_numberParserRuleCall_1() { return cReal_numberParserRuleCall_1; }
	}

	public class Integer_numberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "integer_number");
		private final RuleCall cDigit_sequenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//integer_number:
		//	digit_sequence;
		public ParserRule getRule() { return rule; }

		//digit_sequence
		public RuleCall getDigit_sequenceParserRuleCall() { return cDigit_sequenceParserRuleCall; }
	}

	public class Real_numberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "real_number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDigit_sequenceParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cUnsigned_digit_sequenceParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cScale_factorParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cDigit_sequenceParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cScale_factorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//real_number:
		//	digit_sequence "." unsigned_digit_sequence? scale_factor | digit_sequence scale_factor;
		public ParserRule getRule() { return rule; }

		//digit_sequence "." unsigned_digit_sequence? scale_factor | digit_sequence scale_factor
		public Alternatives getAlternatives() { return cAlternatives; }

		//digit_sequence "." unsigned_digit_sequence? scale_factor
		public Group getGroup_0() { return cGroup_0; }

		//digit_sequence
		public RuleCall getDigit_sequenceParserRuleCall_0_0() { return cDigit_sequenceParserRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//unsigned_digit_sequence?
		public RuleCall getUnsigned_digit_sequenceParserRuleCall_0_2() { return cUnsigned_digit_sequenceParserRuleCall_0_2; }

		//scale_factor
		public RuleCall getScale_factorParserRuleCall_0_3() { return cScale_factorParserRuleCall_0_3; }

		//digit_sequence scale_factor
		public Group getGroup_1() { return cGroup_1; }

		//digit_sequence
		public RuleCall getDigit_sequenceParserRuleCall_1_0() { return cDigit_sequenceParserRuleCall_1_0; }

		//scale_factor
		public RuleCall getScale_factorParserRuleCall_1_1() { return cScale_factorParserRuleCall_1_1; }
	}

	public class Scale_factorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scale_factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cDigit_sequenceParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//scale_factor:
		//	("E" | "e") digit_sequence;
		public ParserRule getRule() { return rule; }

		//("E" | "e") digit_sequence
		public Group getGroup() { return cGroup; }

		//"E" | "e"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"E"
		public Keyword getEKeyword_0_0() { return cEKeyword_0_0; }

		//"e"
		public Keyword getEKeyword_0_1() { return cEKeyword_0_1; }

		//digit_sequence
		public RuleCall getDigit_sequenceParserRuleCall_1() { return cDigit_sequenceParserRuleCall_1; }
	}

	public class Unsigned_digit_sequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unsigned_digit_sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDIGITTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDIGITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//unsigned_digit_sequence:
		//	DIGIT DIGIT*;
		public ParserRule getRule() { return rule; }

		//DIGIT DIGIT*
		public Group getGroup() { return cGroup; }

		//DIGIT
		public RuleCall getDIGITTerminalRuleCall_0() { return cDIGITTerminalRuleCall_0; }

		//DIGIT*
		public RuleCall getDIGITTerminalRuleCall_1() { return cDIGITTerminalRuleCall_1; }
	}

	public class Digit_sequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "digit_sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSignParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cUnsigned_digit_sequenceParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//digit_sequence:
		//	sign? unsigned_digit_sequence;
		public ParserRule getRule() { return rule; }

		//sign? unsigned_digit_sequence
		public Group getGroup() { return cGroup; }

		//sign?
		public RuleCall getSignParserRuleCall_0() { return cSignParserRuleCall_0; }

		//unsigned_digit_sequence
		public RuleCall getUnsigned_digit_sequenceParserRuleCall_1() { return cUnsigned_digit_sequenceParserRuleCall_1; }
	}

	public class SignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//sign:
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "label");
		private final RuleCall cInteger_numberParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//label:
		//	integer_number;
		public ParserRule getRule() { return rule; }

		//integer_number
		public RuleCall getInteger_numberParserRuleCall() { return cInteger_numberParserRuleCall; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cSignParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cConstant_identifierParserRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cNumberParserRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//constant:
		//	sign? (constant_identifier | number) | STRING;
		public ParserRule getRule() { return rule; }

		//sign? (constant_identifier | number) | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//sign? (constant_identifier | number)
		public Group getGroup_0() { return cGroup_0; }

		//sign?
		public RuleCall getSignParserRuleCall_0_0() { return cSignParserRuleCall_0_0; }

		//constant_identifier | number
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//constant_identifier
		public RuleCall getConstant_identifierParserRuleCall_0_1_0() { return cConstant_identifierParserRuleCall_0_1_0; }

		//number
		public RuleCall getNumberParserRuleCall_0_1_1() { return cNumberParserRuleCall_0_1_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final GreetingElements pGreeting;
	private final ProgramElements pProgram;
	private final Program_headingElements pProgram_heading;
	private final BlockElements pBlock;
	private final Declaration_partElements pDeclaration_part;
	private final Label_declaration_partElements pLabel_declaration_part;
	private final Constant_definition_partElements pConstant_definition_part;
	private final Constant_definitionElements pConstant_definition;
	private final Type_definition_partElements pType_definition_part;
	private final Type_definitionElements pType_definition;
	private final Variable_declaration_partElements pVariable_declaration_part;
	private final Variable_declarationElements pVariable_declaration;
	private final Procedure_and_function_declaration_partElements pProcedure_and_function_declaration_part;
	private final Statement_partElements pStatement_part;
	private final Statement_sequenceElements pStatement_sequence;
	private final StatementElements pStatement;
	private final Relational_operatorElements pRelational_operator;
	private final Addition_operatorElements pAddition_operator;
	private final Multiplication_operatorElements pMultiplication_operator;
	private final Entire_variableElements pEntire_variable;
	private final TypeElements pType;
	private final Enumerated_typeElements pEnumerated_type;
	private final TerminalRule tIDENTIFIER;
	private final Identifier2Elements pIdentifier2;
	private final Field_identifierElements pField_identifier;
	private final Constant_identifierElements pConstant_identifier;
	private final Variable_identifierElements pVariable_identifier;
	private final Type_identifierElements pType_identifier;
	private final Procedure_identifierElements pProcedure_identifier;
	private final Function_identifierElements pFunction_identifier;
	private final Bound_identifierElements pBound_identifier;
	private final Identifier_listElements pIdentifier_list;
	private final NumberElements pNumber;
	private final Integer_numberElements pInteger_number;
	private final Real_numberElements pReal_number;
	private final Scale_factorElements pScale_factor;
	private final Unsigned_digit_sequenceElements pUnsigned_digit_sequence;
	private final Digit_sequenceElements pDigit_sequence;
	private final SignElements pSign;
	private final TerminalRule tLETTER;
	private final TerminalRule tDIGIT;
	private final LabelElements pLabel;
	private final ConstantElements pConstant;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PascalGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGreeting = new GreetingElements();
		this.pProgram = new ProgramElements();
		this.pProgram_heading = new Program_headingElements();
		this.pBlock = new BlockElements();
		this.pDeclaration_part = new Declaration_partElements();
		this.pLabel_declaration_part = new Label_declaration_partElements();
		this.pConstant_definition_part = new Constant_definition_partElements();
		this.pConstant_definition = new Constant_definitionElements();
		this.pType_definition_part = new Type_definition_partElements();
		this.pType_definition = new Type_definitionElements();
		this.pVariable_declaration_part = new Variable_declaration_partElements();
		this.pVariable_declaration = new Variable_declarationElements();
		this.pProcedure_and_function_declaration_part = new Procedure_and_function_declaration_partElements();
		this.pStatement_part = new Statement_partElements();
		this.pStatement_sequence = new Statement_sequenceElements();
		this.pStatement = new StatementElements();
		this.pRelational_operator = new Relational_operatorElements();
		this.pAddition_operator = new Addition_operatorElements();
		this.pMultiplication_operator = new Multiplication_operatorElements();
		this.pEntire_variable = new Entire_variableElements();
		this.pType = new TypeElements();
		this.pEnumerated_type = new Enumerated_typeElements();
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTIFIER");
		this.pIdentifier2 = new Identifier2Elements();
		this.pField_identifier = new Field_identifierElements();
		this.pConstant_identifier = new Constant_identifierElements();
		this.pVariable_identifier = new Variable_identifierElements();
		this.pType_identifier = new Type_identifierElements();
		this.pProcedure_identifier = new Procedure_identifierElements();
		this.pFunction_identifier = new Function_identifierElements();
		this.pBound_identifier = new Bound_identifierElements();
		this.pIdentifier_list = new Identifier_listElements();
		this.pNumber = new NumberElements();
		this.pInteger_number = new Integer_numberElements();
		this.pReal_number = new Real_numberElements();
		this.pScale_factor = new Scale_factorElements();
		this.pUnsigned_digit_sequence = new Unsigned_digit_sequenceElements();
		this.pDigit_sequence = new Digit_sequenceElements();
		this.pSign = new SignElements();
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LETTER");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIGIT");
		this.pLabel = new LabelElements();
		this.pConstant = new ConstantElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Pascal".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	programs+=program*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Greeting:
	//	"Hello" name=ID "!";
	public GreetingElements getGreetingAccess() {
		return pGreeting;
	}
	
	public ParserRule getGreetingRule() {
		return getGreetingAccess().getRule();
	}

	////PROGRAMS AND BLOCKS
	//program:
	//	program_heading block ".";
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//program_heading:
	//	"program" IDENTIFIER ("(" identifier_list ")")? ";";
	public Program_headingElements getProgram_headingAccess() {
		return pProgram_heading;
	}
	
	public ParserRule getProgram_headingRule() {
		return getProgram_headingAccess().getRule();
	}

	//block:
	//	declaration_part statement_part;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//declaration_part:
	//	label_declaration_part? constant_definition_part? type_definition_part? variable_declaration_part?
	//	procedure_and_function_declaration_part;
	public Declaration_partElements getDeclaration_partAccess() {
		return pDeclaration_part;
	}
	
	public ParserRule getDeclaration_partRule() {
		return getDeclaration_partAccess().getRule();
	}

	//label_declaration_part:
	//	"label" label ("," label)* ";";
	public Label_declaration_partElements getLabel_declaration_partAccess() {
		return pLabel_declaration_part;
	}
	
	public ParserRule getLabel_declaration_partRule() {
		return getLabel_declaration_partAccess().getRule();
	}

	//constant_definition_part:
	//	"const" constant_definition ";" (constant_definition ";")*;
	public Constant_definition_partElements getConstant_definition_partAccess() {
		return pConstant_definition_part;
	}
	
	public ParserRule getConstant_definition_partRule() {
		return getConstant_definition_partAccess().getRule();
	}

	//constant_definition:
	//	IDENTIFIER "=" constant;
	public Constant_definitionElements getConstant_definitionAccess() {
		return pConstant_definition;
	}
	
	public ParserRule getConstant_definitionRule() {
		return getConstant_definitionAccess().getRule();
	}

	//type_definition_part:
	//	"type" type_definition ";" (type_definition ";")*;
	public Type_definition_partElements getType_definition_partAccess() {
		return pType_definition_part;
	}
	
	public ParserRule getType_definition_partRule() {
		return getType_definition_partAccess().getRule();
	}

	//type_definition:
	//	IDENTIFIER "=" type;
	public Type_definitionElements getType_definitionAccess() {
		return pType_definition;
	}
	
	public ParserRule getType_definitionRule() {
		return getType_definitionAccess().getRule();
	}

	//variable_declaration_part:
	//	"var" variable_declaration ";" (variable_declaration ";")*;
	public Variable_declaration_partElements getVariable_declaration_partAccess() {
		return pVariable_declaration_part;
	}
	
	public ParserRule getVariable_declaration_partRule() {
		return getVariable_declaration_partAccess().getRule();
	}

	//variable_declaration:
	//	identifier_list ":" type;
	public Variable_declarationElements getVariable_declarationAccess() {
		return pVariable_declaration;
	}
	
	public ParserRule getVariable_declarationRule() {
		return getVariable_declarationAccess().getRule();
	}

	//procedure_and_function_declaration_part:
	//	(("procedure_declaration" | "function_declaration") ";")*;
	public Procedure_and_function_declaration_partElements getProcedure_and_function_declaration_partAccess() {
		return pProcedure_and_function_declaration_part;
	}
	
	public ParserRule getProcedure_and_function_declaration_partRule() {
		return getProcedure_and_function_declaration_partAccess().getRule();
	}

	//statement_part:
	//	"begin" statement_sequence "end";
	public Statement_partElements getStatement_partAccess() {
		return pStatement_part;
	}
	
	public ParserRule getStatement_partRule() {
		return getStatement_partAccess().getRule();
	}

	////STATEMENTS
	//statement_sequence:
	//	statement statement*;
	public Statement_sequenceElements getStatement_sequenceAccess() {
		return pStatement_sequence;
	}
	
	public ParserRule getStatement_sequenceRule() {
		return getStatement_sequenceAccess().getRule();
	}

	//statement:
	//	"statement" ";";
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	////EXPRESSIONS
	//relational_operator:
	//	"=" | "<>" | "<" | "<=" | ">" | ">=" | "in";
	public Relational_operatorElements getRelational_operatorAccess() {
		return pRelational_operator;
	}
	
	public ParserRule getRelational_operatorRule() {
		return getRelational_operatorAccess().getRule();
	}

	//addition_operator:
	//	"+" | "-" | "or";
	public Addition_operatorElements getAddition_operatorAccess() {
		return pAddition_operator;
	}
	
	public ParserRule getAddition_operatorRule() {
		return getAddition_operatorAccess().getRule();
	}

	//multiplication_operator:
	//	"*" | "/" | "div" | "mod" | "and";
	public Multiplication_operatorElements getMultiplication_operatorAccess() {
		return pMultiplication_operator;
	}
	
	public ParserRule getMultiplication_operatorRule() {
		return getMultiplication_operatorAccess().getRule();
	}

	//entire_variable:
	//	variable_identifier | field_identifier;
	public Entire_variableElements getEntire_variableAccess() {
		return pEntire_variable;
	}
	
	public ParserRule getEntire_variableRule() {
		return getEntire_variableAccess().getRule();
	}

	////TYPES
	//type:
	//	"simple_type" | "structured_type" | "pointer_type" | "type_identifier";
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//enumerated_type:
	//	"(" identifier_list ")";
	public Enumerated_typeElements getEnumerated_typeAccess() {
		return pEnumerated_type;
	}
	
	public ParserRule getEnumerated_typeRule() {
		return getEnumerated_typeAccess().getRule();
	}

	////VARIABLE AND IDENTIFIER CATEGORIES
	//terminal IDENTIFIER:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	} 

	//identifier2:
	//	LETTER (LETTER | DIGIT)*;
	public Identifier2Elements getIdentifier2Access() {
		return pIdentifier2;
	}
	
	public ParserRule getIdentifier2Rule() {
		return getIdentifier2Access().getRule();
	}

	//field_identifier:
	//	IDENTIFIER;
	public Field_identifierElements getField_identifierAccess() {
		return pField_identifier;
	}
	
	public ParserRule getField_identifierRule() {
		return getField_identifierAccess().getRule();
	}

	//constant_identifier:
	//	IDENTIFIER;
	public Constant_identifierElements getConstant_identifierAccess() {
		return pConstant_identifier;
	}
	
	public ParserRule getConstant_identifierRule() {
		return getConstant_identifierAccess().getRule();
	}

	//variable_identifier:
	//	IDENTIFIER;
	public Variable_identifierElements getVariable_identifierAccess() {
		return pVariable_identifier;
	}
	
	public ParserRule getVariable_identifierRule() {
		return getVariable_identifierAccess().getRule();
	}

	//type_identifier:
	//	IDENTIFIER;
	public Type_identifierElements getType_identifierAccess() {
		return pType_identifier;
	}
	
	public ParserRule getType_identifierRule() {
		return getType_identifierAccess().getRule();
	}

	//procedure_identifier:
	//	IDENTIFIER;
	public Procedure_identifierElements getProcedure_identifierAccess() {
		return pProcedure_identifier;
	}
	
	public ParserRule getProcedure_identifierRule() {
		return getProcedure_identifierAccess().getRule();
	}

	//function_identifier:
	//	IDENTIFIER;
	public Function_identifierElements getFunction_identifierAccess() {
		return pFunction_identifier;
	}
	
	public ParserRule getFunction_identifierRule() {
		return getFunction_identifierAccess().getRule();
	}

	//bound_identifier:
	//	IDENTIFIER;
	public Bound_identifierElements getBound_identifierAccess() {
		return pBound_identifier;
	}
	
	public ParserRule getBound_identifierRule() {
		return getBound_identifierAccess().getRule();
	}

	////LOW LEVEL DEFINITIONS
	//identifier_list:
	//	IDENTIFIER ("," IDENTIFIER)*;
	public Identifier_listElements getIdentifier_listAccess() {
		return pIdentifier_list;
	}
	
	public ParserRule getIdentifier_listRule() {
		return getIdentifier_listAccess().getRule();
	}

	//number:
	//	integer_number | real_number;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//integer_number:
	//	digit_sequence;
	public Integer_numberElements getInteger_numberAccess() {
		return pInteger_number;
	}
	
	public ParserRule getInteger_numberRule() {
		return getInteger_numberAccess().getRule();
	}

	//real_number:
	//	digit_sequence "." unsigned_digit_sequence? scale_factor | digit_sequence scale_factor;
	public Real_numberElements getReal_numberAccess() {
		return pReal_number;
	}
	
	public ParserRule getReal_numberRule() {
		return getReal_numberAccess().getRule();
	}

	//scale_factor:
	//	("E" | "e") digit_sequence;
	public Scale_factorElements getScale_factorAccess() {
		return pScale_factor;
	}
	
	public ParserRule getScale_factorRule() {
		return getScale_factorAccess().getRule();
	}

	//unsigned_digit_sequence:
	//	DIGIT DIGIT*;
	public Unsigned_digit_sequenceElements getUnsigned_digit_sequenceAccess() {
		return pUnsigned_digit_sequence;
	}
	
	public ParserRule getUnsigned_digit_sequenceRule() {
		return getUnsigned_digit_sequenceAccess().getRule();
	}

	//digit_sequence:
	//	sign? unsigned_digit_sequence;
	public Digit_sequenceElements getDigit_sequenceAccess() {
		return pDigit_sequence;
	}
	
	public ParserRule getDigit_sequenceRule() {
		return getDigit_sequenceAccess().getRule();
	}

	//sign:
	//	"+" | "-";
	public SignElements getSignAccess() {
		return pSign;
	}
	
	public ParserRule getSignRule() {
		return getSignAccess().getRule();
	}

	//terminal LETTER:
	//	"a".."z" | "A".."Z";
	public TerminalRule getLETTERRule() {
		return tLETTER;
	} 

	//terminal DIGIT:
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	} 

	//label:
	//	integer_number;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//constant:
	//	sign? (constant_identifier | number) | STRING;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
