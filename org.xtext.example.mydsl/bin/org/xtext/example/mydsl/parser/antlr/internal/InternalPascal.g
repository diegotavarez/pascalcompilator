/*
* generated by Xtext
*/
grammar InternalPascal;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.PascalGrammarAccess;

}

@parser::members {

 	private PascalGrammarAccess grammarAccess;
 	
    public InternalPascalParser(TokenStream input, PascalGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected PascalGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getProgramsProgramParserRuleCall_0()); 
	    }
		lv_programs_0_0=ruleprogram		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"programs",
        		lv_programs_0_0, 
        		"program");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleprogram
entryRuleprogram returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); } 
	 iv_ruleprogram=ruleprogram 
	 { $current=$iv_ruleprogram.current.getText(); }  
	 EOF 
;

// Rule program
ruleprogram returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getProgramAccess().getProgram_headingParserRuleCall_0()); 
    }
    this_program_heading_0=ruleprogram_heading    {
		$current.merge(this_program_heading_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getProgramAccess().getBlockParserRuleCall_1()); 
    }
    this_block_1=ruleblock    {
		$current.merge(this_block_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgramAccess().getFullStopKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleprogram_heading
entryRuleprogram_heading returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgram_headingRule()); } 
	 iv_ruleprogram_heading=ruleprogram_heading 
	 { $current=$iv_ruleprogram_heading.current.getText(); }  
	 EOF 
;

// Rule program_heading
ruleprogram_heading returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='program' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgram_headingAccess().getProgramKeyword_0()); 
    }
    this_IDENTIFIER_1=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_1);
    }

    { 
    newLeafNode(this_IDENTIFIER_1, grammarAccess.getProgram_headingAccess().getIDENTIFIERTerminalRuleCall_1()); 
    }
(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgram_headingAccess().getLeftParenthesisKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getProgram_headingAccess().getIdentifier_listParserRuleCall_2_1()); 
    }
    this_identifier_list_3=ruleidentifier_list    {
		$current.merge(this_identifier_list_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgram_headingAccess().getRightParenthesisKeyword_2_2()); 
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProgram_headingAccess().getSemicolonKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleblock
entryRuleblock returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); } 
	 iv_ruleblock=ruleblock 
	 { $current=$iv_ruleblock.current.getText(); }  
	 EOF 
;

// Rule block
ruleblock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBlockAccess().getDeclaration_partParserRuleCall_0()); 
    }
    this_declaration_part_0=ruledeclaration_part    {
		$current.merge(this_declaration_part_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getBlockAccess().getStatement_partParserRuleCall_1()); 
    }
    this_statement_part_1=rulestatement_part    {
		$current.merge(this_statement_part_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuledeclaration_part
entryRuledeclaration_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaration_partRule()); } 
	 iv_ruledeclaration_part=ruledeclaration_part 
	 { $current=$iv_ruledeclaration_part.current.getText(); }  
	 EOF 
;

// Rule declaration_part
ruledeclaration_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getDeclaration_partAccess().getLabel_declaration_partParserRuleCall_0()); 
    }
    this_label_declaration_part_0=rulelabel_declaration_part    {
		$current.merge(this_label_declaration_part_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getDeclaration_partAccess().getConstant_definition_partParserRuleCall_1()); 
    }
    this_constant_definition_part_1=ruleconstant_definition_part    {
		$current.merge(this_constant_definition_part_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getDeclaration_partAccess().getType_definition_partParserRuleCall_2()); 
    }
    this_type_definition_part_2=ruletype_definition_part    {
		$current.merge(this_type_definition_part_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getDeclaration_partAccess().getVariable_declaration_partParserRuleCall_3()); 
    }
    this_variable_declaration_part_3=rulevariable_declaration_part    {
		$current.merge(this_variable_declaration_part_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getDeclaration_partAccess().getProcedure_and_function_declaration_partParserRuleCall_4()); 
    }
    this_procedure_and_function_declaration_part_4=ruleprocedure_and_function_declaration_part    {
		$current.merge(this_procedure_and_function_declaration_part_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulelabel_declaration_part
entryRulelabel_declaration_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabel_declaration_partRule()); } 
	 iv_rulelabel_declaration_part=rulelabel_declaration_part 
	 { $current=$iv_rulelabel_declaration_part.current.getText(); }  
	 EOF 
;

// Rule label_declaration_part
rulelabel_declaration_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='label' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLabel_declaration_partAccess().getLabelKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getLabel_declaration_partAccess().getLabelParserRuleCall_1()); 
    }
    this_label_1=rulelabel    {
		$current.merge(this_label_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLabel_declaration_partAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getLabel_declaration_partAccess().getLabelParserRuleCall_2_1()); 
    }
    this_label_3=rulelabel    {
		$current.merge(this_label_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLabel_declaration_partAccess().getSemicolonKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleconstant_definition_part
entryRuleconstant_definition_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstant_definition_partRule()); } 
	 iv_ruleconstant_definition_part=ruleconstant_definition_part 
	 { $current=$iv_ruleconstant_definition_part.current.getText(); }  
	 EOF 
;

// Rule constant_definition_part
ruleconstant_definition_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='const' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstant_definition_partAccess().getConstKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getConstant_definition_partAccess().getConstant_definitionParserRuleCall_1()); 
    }
    this_constant_definition_1=ruleconstant_definition    {
		$current.merge(this_constant_definition_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstant_definition_partAccess().getSemicolonKeyword_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getConstant_definition_partAccess().getConstant_definitionParserRuleCall_3_0()); 
    }
    this_constant_definition_3=ruleconstant_definition    {
		$current.merge(this_constant_definition_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstant_definition_partAccess().getSemicolonKeyword_3_1()); 
    }
)*)
    ;





// Entry rule entryRuleconstant_definition
entryRuleconstant_definition returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstant_definitionRule()); } 
	 iv_ruleconstant_definition=ruleconstant_definition 
	 { $current=$iv_ruleconstant_definition.current.getText(); }  
	 EOF 
;

// Rule constant_definition
ruleconstant_definition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getConstant_definitionAccess().getIDENTIFIERTerminalRuleCall_0()); 
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstant_definitionAccess().getEqualsSignKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getConstant_definitionAccess().getConstantParserRuleCall_2()); 
    }
    this_constant_2=ruleconstant    {
		$current.merge(this_constant_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuletype_definition_part
entryRuletype_definition_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getType_definition_partRule()); } 
	 iv_ruletype_definition_part=ruletype_definition_part 
	 { $current=$iv_ruletype_definition_part.current.getText(); }  
	 EOF 
;

// Rule type_definition_part
ruletype_definition_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='type' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_definition_partAccess().getTypeKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getType_definition_partAccess().getType_definitionParserRuleCall_1()); 
    }
    this_type_definition_1=ruletype_definition    {
		$current.merge(this_type_definition_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_definition_partAccess().getSemicolonKeyword_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getType_definition_partAccess().getType_definitionParserRuleCall_3_0()); 
    }
    this_type_definition_3=ruletype_definition    {
		$current.merge(this_type_definition_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_definition_partAccess().getSemicolonKeyword_3_1()); 
    }
)*)
    ;





// Entry rule entryRuletype_definition
entryRuletype_definition returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getType_definitionRule()); } 
	 iv_ruletype_definition=ruletype_definition 
	 { $current=$iv_ruletype_definition.current.getText(); }  
	 EOF 
;

// Rule type_definition
ruletype_definition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getType_definitionAccess().getIDENTIFIERTerminalRuleCall_0()); 
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_definitionAccess().getEqualsSignKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getType_definitionAccess().getTypeParserRuleCall_2()); 
    }
    this_type_2=ruletype    {
		$current.merge(this_type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulevariable_declaration_part
entryRulevariable_declaration_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariable_declaration_partRule()); } 
	 iv_rulevariable_declaration_part=rulevariable_declaration_part 
	 { $current=$iv_rulevariable_declaration_part.current.getText(); }  
	 EOF 
;

// Rule variable_declaration_part
rulevariable_declaration_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='var' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_declaration_partAccess().getVarKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariable_declaration_partAccess().getVariable_declarationParserRuleCall_1()); 
    }
    this_variable_declaration_1=rulevariable_declaration    {
		$current.merge(this_variable_declaration_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_declaration_partAccess().getSemicolonKeyword_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getVariable_declaration_partAccess().getVariable_declarationParserRuleCall_3_0()); 
    }
    this_variable_declaration_3=rulevariable_declaration    {
		$current.merge(this_variable_declaration_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_declaration_partAccess().getSemicolonKeyword_3_1()); 
    }
)*)
    ;





// Entry rule entryRulevariable_declaration
entryRulevariable_declaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariable_declarationRule()); } 
	 iv_rulevariable_declaration=rulevariable_declaration 
	 { $current=$iv_rulevariable_declaration.current.getText(); }  
	 EOF 
;

// Rule variable_declaration
rulevariable_declaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVariable_declarationAccess().getIdentifier_listParserRuleCall_0()); 
    }
    this_identifier_list_0=ruleidentifier_list    {
		$current.merge(this_identifier_list_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariable_declarationAccess().getColonKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariable_declarationAccess().getTypeParserRuleCall_2()); 
    }
    this_type_2=ruletype    {
		$current.merge(this_type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleprocedure_and_function_declaration_part
entryRuleprocedure_and_function_declaration_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedure_and_function_declaration_partRule()); } 
	 iv_ruleprocedure_and_function_declaration_part=ruleprocedure_and_function_declaration_part 
	 { $current=$iv_ruleprocedure_and_function_declaration_part.current.getText(); }  
	 EOF 
;

// Rule procedure_and_function_declaration_part
ruleprocedure_and_function_declaration_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='procedure_declaration' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProcedure_and_function_declaration_partAccess().getProcedure_declarationKeyword_0_0()); 
    }

    |
	kw='function_declaration' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProcedure_and_function_declaration_partAccess().getFunction_declarationKeyword_0_1()); 
    }
)
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProcedure_and_function_declaration_partAccess().getSemicolonKeyword_1()); 
    }
)*
    ;





// Entry rule entryRulestatement_part
entryRulestatement_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_partRule()); } 
	 iv_rulestatement_part=rulestatement_part 
	 { $current=$iv_rulestatement_part.current.getText(); }  
	 EOF 
;

// Rule statement_part
rulestatement_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='begin' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatement_partAccess().getBeginKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getStatement_partAccess().getStatement_sequenceParserRuleCall_1()); 
    }
    this_statement_sequence_1=rulestatement_sequence    {
		$current.merge(this_statement_sequence_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='end' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatement_partAccess().getEndKeyword_2()); 
    }
)
    ;





// Entry rule entryRulestatement_sequence
entryRulestatement_sequence returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_sequenceRule()); } 
	 iv_rulestatement_sequence=rulestatement_sequence 
	 { $current=$iv_rulestatement_sequence.current.getText(); }  
	 EOF 
;

// Rule statement_sequence
rulestatement_sequence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatement_sequenceAccess().getStatementParserRuleCall_0()); 
    }
    this_statement_0=rulestatement    {
		$current.merge(this_statement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getStatement_sequenceAccess().getStatementParserRuleCall_1()); 
    }
    this_statement_1=rulestatement    {
		$current.merge(this_statement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRulestatement
entryRulestatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); } 
	 iv_rulestatement=rulestatement 
	 { $current=$iv_rulestatement.current.getText(); }  
	 EOF 
;

// Rule statement
rulestatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='statement' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getStatementKeyword_0()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStatementAccess().getSemicolonKeyword_1()); 
    }
)
    ;





// Entry rule entryRulecase_label_list
entryRulecase_label_list returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCase_label_listRule()); } 
	 iv_rulecase_label_list=rulecase_label_list 
	 { $current=$iv_rulecase_label_list.current.getText(); }  
	 EOF 
;

// Rule case_label_list
rulecase_label_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCase_label_listAccess().getConstantParserRuleCall_0()); 
    }
    this_constant_0=ruleconstant    {
		$current.merge(this_constant_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCase_label_listAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getCase_label_listAccess().getConstantParserRuleCall_1_1()); 
    }
    this_constant_2=ruleconstant    {
		$current.merge(this_constant_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;













// Entry rule entryRuletype
entryRuletype returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); } 
	 iv_ruletype=ruletype 
	 { $current=$iv_ruletype.current.getText(); }  
	 EOF 
;

// Rule type
ruletype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getSimple_typeParserRuleCall_0()); 
    }
    this_simple_type_0=rulesimple_type    {
		$current.merge(this_simple_type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getStructured_typeParserRuleCall_1()); 
    }
    this_structured_type_1=rulestructured_type    {
		$current.merge(this_structured_type_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getPointer_typeParserRuleCall_2()); 
    }
    this_pointer_type_2=rulepointer_type    {
		$current.merge(this_pointer_type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getType_identifierParserRuleCall_3()); 
    }
    this_type_identifier_3=ruletype_identifier    {
		$current.merge(this_type_identifier_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='TESTE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeAccess().getTESTEKeyword_4()); 
    }
)
    ;





// Entry rule entryRulesimple_type
entryRulesimple_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimple_typeRule()); } 
	 iv_rulesimple_type=rulesimple_type 
	 { $current=$iv_rulesimple_type.current.getText(); }  
	 EOF 
;

// Rule simple_type
rulesimple_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSimple_typeAccess().getSubrange_typeParserRuleCall_0()); 
    }
    this_subrange_type_0=rulesubrange_type    {
		$current.merge(this_subrange_type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimple_typeAccess().getEnumerated_typeParserRuleCall_1()); 
    }
    this_enumerated_type_1=ruleenumerated_type    {
		$current.merge(this_enumerated_type_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleenumerated_type
entryRuleenumerated_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumerated_typeRule()); } 
	 iv_ruleenumerated_type=ruleenumerated_type 
	 { $current=$iv_ruleenumerated_type.current.getText(); }  
	 EOF 
;

// Rule enumerated_type
ruleenumerated_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumerated_typeAccess().getLeftParenthesisKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getEnumerated_typeAccess().getIdentifier_listParserRuleCall_1()); 
    }
    this_identifier_list_1=ruleidentifier_list    {
		$current.merge(this_identifier_list_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumerated_typeAccess().getRightParenthesisKeyword_2()); 
    }
)
    ;





// Entry rule entryRulesubrange_type
entryRulesubrange_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubrange_typeRule()); } 
	 iv_rulesubrange_type=rulesubrange_type 
	 { $current=$iv_rulesubrange_type.current.getText(); }  
	 EOF 
;

// Rule subrange_type
rulesubrange_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSubrange_typeAccess().getLower_boundParserRuleCall_0()); 
    }
    this_lower_bound_0=rulelower_bound    {
		$current.merge(this_lower_bound_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='..' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSubrange_typeAccess().getFullStopFullStopKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getSubrange_typeAccess().getUpper_boundParserRuleCall_2()); 
    }
    this_upper_bound_2=ruleupper_bound    {
		$current.merge(this_upper_bound_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulelower_bound
entryRulelower_bound returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLower_boundRule()); } 
	 iv_rulelower_bound=rulelower_bound 
	 { $current=$iv_rulelower_bound.current.getText(); }  
	 EOF 
;

// Rule lower_bound
rulelower_bound returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getLower_boundAccess().getConstantParserRuleCall()); 
    }
    this_constant_0=ruleconstant    {
		$current.merge(this_constant_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleupper_bound
entryRuleupper_bound returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUpper_boundRule()); } 
	 iv_ruleupper_bound=ruleupper_bound 
	 { $current=$iv_ruleupper_bound.current.getText(); }  
	 EOF 
;

// Rule upper_bound
ruleupper_bound returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getUpper_boundAccess().getConstantParserRuleCall()); 
    }
    this_constant_0=ruleconstant    {
		$current.merge(this_constant_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulestructured_type
entryRulestructured_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructured_typeRule()); } 
	 iv_rulestructured_type=rulestructured_type 
	 { $current=$iv_rulestructured_type.current.getText(); }  
	 EOF 
;

// Rule structured_type
rulestructured_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='packed' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructured_typeAccess().getPackedKeyword_0()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getStructured_typeAccess().getUnpacked_structured_typeParserRuleCall_1()); 
    }
    this_unpacked_structured_type_1=ruleunpacked_structured_type    {
		$current.merge(this_unpacked_structured_type_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleunpacked_structured_type
entryRuleunpacked_structured_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnpacked_structured_typeRule()); } 
	 iv_ruleunpacked_structured_type=ruleunpacked_structured_type 
	 { $current=$iv_ruleunpacked_structured_type.current.getText(); }  
	 EOF 
;

// Rule unpacked_structured_type
ruleunpacked_structured_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUnpacked_structured_typeAccess().getArray_typeParserRuleCall_0()); 
    }
    this_array_type_0=rulearray_type    {
		$current.merge(this_array_type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnpacked_structured_typeAccess().getRecord_typeParserRuleCall_1()); 
    }
    this_record_type_1=rulerecord_type    {
		$current.merge(this_record_type_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnpacked_structured_typeAccess().getSet_typeParserRuleCall_2()); 
    }
    this_set_type_2=ruleset_type    {
		$current.merge(this_set_type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnpacked_structured_typeAccess().getFile_typeParserRuleCall_3()); 
    }
    this_file_type_3=rulefile_type    {
		$current.merge(this_file_type_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulearray_type
entryRulearray_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getArray_typeRule()); } 
	 iv_rulearray_type=rulearray_type 
	 { $current=$iv_rulearray_type.current.getText(); }  
	 EOF 
;

// Rule array_type
rulearray_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='array' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArray_typeAccess().getArrayKeyword_0()); 
    }

	kw='[ ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArray_typeAccess().getLeftSquareBracketSpaceKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getArray_typeAccess().getIndex_typeParserRuleCall_2()); 
    }
    this_index_type_2=ruleindex_type    {
		$current.merge(this_index_type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArray_typeAccess().getCommaKeyword_3_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getArray_typeAccess().getIndex_typeParserRuleCall_3_1()); 
    }
    this_index_type_4=ruleindex_type    {
		$current.merge(this_index_type_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw=' ]' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArray_typeAccess().getSpaceRightSquareBracketKeyword_4()); 
    }

	kw='of' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArray_typeAccess().getOfKeyword_5()); 
    }

    { 
        newCompositeNode(grammarAccess.getArray_typeAccess().getElement_typeParserRuleCall_6()); 
    }
    this_element_type_7=ruleelement_type    {
		$current.merge(this_element_type_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleindex_type
entryRuleindex_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndex_typeRule()); } 
	 iv_ruleindex_type=ruleindex_type 
	 { $current=$iv_ruleindex_type.current.getText(); }  
	 EOF 
;

// Rule index_type
ruleindex_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getIndex_typeAccess().getSimple_typeParserRuleCall()); 
    }
    this_simple_type_0=rulesimple_type    {
		$current.merge(this_simple_type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleelement_type
entryRuleelement_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getElement_typeRule()); } 
	 iv_ruleelement_type=ruleelement_type 
	 { $current=$iv_ruleelement_type.current.getText(); }  
	 EOF 
;

// Rule element_type
ruleelement_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getElement_typeAccess().getTypeParserRuleCall()); 
    }
    this_type_0=ruletype    {
		$current.merge(this_type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulerecord_type
entryRulerecord_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecord_typeRule()); } 
	 iv_rulerecord_type=rulerecord_type 
	 { $current=$iv_rulerecord_type.current.getText(); }  
	 EOF 
;

// Rule record_type
rulerecord_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='record' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRecord_typeAccess().getRecordKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getRecord_typeAccess().getField_listParserRuleCall_1()); 
    }
    this_field_list_1=rulefield_list    {
		$current.merge(this_field_list_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='end' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRecord_typeAccess().getEndKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleset_type
entryRuleset_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSet_typeRule()); } 
	 iv_ruleset_type=ruleset_type 
	 { $current=$iv_ruleset_type.current.getText(); }  
	 EOF 
;

// Rule set_type
ruleset_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='set' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSet_typeAccess().getSetKeyword_0()); 
    }

	kw='of' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSet_typeAccess().getOfKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getSet_typeAccess().getBase_typeParserRuleCall_2()); 
    }
    this_base_type_2=rulebase_type    {
		$current.merge(this_base_type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulebase_type
entryRulebase_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBase_typeRule()); } 
	 iv_rulebase_type=rulebase_type 
	 { $current=$iv_rulebase_type.current.getText(); }  
	 EOF 
;

// Rule base_type
rulebase_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getBase_typeAccess().getTypeParserRuleCall()); 
    }
    this_type_0=ruletype    {
		$current.merge(this_type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulefile_type
entryRulefile_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFile_typeRule()); } 
	 iv_rulefile_type=rulefile_type 
	 { $current=$iv_rulefile_type.current.getText(); }  
	 EOF 
;

// Rule file_type
rulefile_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='file' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFile_typeAccess().getFileKeyword_0()); 
    }

	kw='of' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFile_typeAccess().getOfKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getFile_typeAccess().getFile_component_typeParserRuleCall_2()); 
    }
    this_file_component_type_2=rulefile_component_type    {
		$current.merge(this_file_component_type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulefile_component_type
entryRulefile_component_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFile_component_typeRule()); } 
	 iv_rulefile_component_type=rulefile_component_type 
	 { $current=$iv_rulefile_component_type.current.getText(); }  
	 EOF 
;

// Rule file_component_type
rulefile_component_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getFile_component_typeAccess().getTypeParserRuleCall()); 
    }
    this_type_0=ruletype    {
		$current.merge(this_type_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulepointer_type
entryRulepointer_type returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPointer_typeRule()); } 
	 iv_rulepointer_type=rulepointer_type 
	 { $current=$iv_rulepointer_type.current.getText(); }  
	 EOF 
;

// Rule pointer_type
rulepointer_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='^' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPointer_typeAccess().getCircumflexAccentKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPointer_typeAccess().getType_identifierParserRuleCall_1()); 
    }
    this_type_identifier_1=ruletype_identifier    {
		$current.merge(this_type_identifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulefield_list
entryRulefield_list returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getField_listRule()); } 
	 iv_rulefield_list=rulefield_list 
	 { $current=$iv_rulefield_list.current.getText(); }  
	 EOF 
;

// Rule field_list
rulefield_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    { 
        newCompositeNode(grammarAccess.getField_listAccess().getFixed_partParserRuleCall_0_0_0()); 
    }
    this_fixed_part_0=rulefixed_part    {
		$current.merge(this_fixed_part_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getField_listAccess().getSemicolonKeyword_0_0_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getField_listAccess().getVariant_partParserRuleCall_0_0_1_1()); 
    }
    this_variant_part_2=rulevariant_part    {
		$current.merge(this_variant_part_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    |
    { 
        newCompositeNode(grammarAccess.getField_listAccess().getVariant_partParserRuleCall_0_1()); 
    }
    this_variant_part_3=rulevariant_part    {
		$current.merge(this_variant_part_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)(
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getField_listAccess().getSemicolonKeyword_1()); 
    }
)?)?
    ;





// Entry rule entryRulefixed_part
entryRulefixed_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFixed_partRule()); } 
	 iv_rulefixed_part=rulefixed_part 
	 { $current=$iv_rulefixed_part.current.getText(); }  
	 EOF 
;

// Rule fixed_part
rulefixed_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFixed_partAccess().getRecord_sectionParserRuleCall_0()); 
    }
    this_record_section_0=rulerecord_section    {
		$current.merge(this_record_section_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFixed_partAccess().getSemicolonKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFixed_partAccess().getRecord_sectionParserRuleCall_1_1()); 
    }
    this_record_section_2=rulerecord_section    {
		$current.merge(this_record_section_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRulerecord_section
entryRulerecord_section returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecord_sectionRule()); } 
	 iv_rulerecord_section=rulerecord_section 
	 { $current=$iv_rulerecord_section.current.getText(); }  
	 EOF 
;

// Rule record_section
rulerecord_section returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRecord_sectionAccess().getIdentifier_listParserRuleCall_0()); 
    }
    this_identifier_list_0=ruleidentifier_list    {
		$current.merge(this_identifier_list_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRecord_sectionAccess().getColonKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getRecord_sectionAccess().getTypeParserRuleCall_2()); 
    }
    this_type_2=ruletype    {
		$current.merge(this_type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulevariant_part
entryRulevariant_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariant_partRule()); } 
	 iv_rulevariant_part=rulevariant_part 
	 { $current=$iv_rulevariant_part.current.getText(); }  
	 EOF 
;

// Rule variant_part
rulevariant_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='case' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariant_partAccess().getCaseKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariant_partAccess().getTag_fieldParserRuleCall_1()); 
    }
    this_tag_field_1=ruletag_field    {
		$current.merge(this_tag_field_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getVariant_partAccess().getType_identifierParserRuleCall_2()); 
    }
    this_type_identifier_2=ruletype_identifier    {
		$current.merge(this_type_identifier_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='of' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariant_partAccess().getOfKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariant_partAccess().getVariantParserRuleCall_4()); 
    }
    this_variant_4=rulevariant    {
		$current.merge(this_variant_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariant_partAccess().getSemicolonKeyword_5_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariant_partAccess().getVariantParserRuleCall_5_1()); 
    }
    this_variant_6=rulevariant    {
		$current.merge(this_variant_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuletag_field
entryRuletag_field returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTag_fieldRule()); } 
	 iv_ruletag_field=ruletag_field 
	 { $current=$iv_ruletag_field.current.getText(); }  
	 EOF 
;

// Rule tag_field
ruletag_field returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getTag_fieldAccess().getIDENTIFIERTerminalRuleCall_0()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTag_fieldAccess().getColonKeyword_1()); 
    }
)?
    ;





// Entry rule entryRulevariant
entryRulevariant returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariantRule()); } 
	 iv_rulevariant=rulevariant 
	 { $current=$iv_rulevariant.current.getText(); }  
	 EOF 
;

// Rule variant
rulevariant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVariantAccess().getCase_label_listParserRuleCall_0()); 
    }
    this_case_label_list_0=rulecase_label_list    {
		$current.merge(this_case_label_list_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariantAccess().getColonKeyword_1()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariantAccess().getLeftParenthesisKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getVariantAccess().getField_listParserRuleCall_3()); 
    }
    this_field_list_3=rulefield_list    {
		$current.merge(this_field_list_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariantAccess().getRightParenthesisKeyword_4()); 
    }
)
    ;







// Entry rule entryRulefield_identifier
entryRulefield_identifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getField_identifierRule()); } 
	 iv_rulefield_identifier=rulefield_identifier 
	 { $current=$iv_rulefield_identifier.current.getText(); }  
	 EOF 
;

// Rule field_identifier
rulefield_identifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getField_identifierAccess().getIDENTIFIERTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleconstant_identifier
entryRuleconstant_identifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstant_identifierRule()); } 
	 iv_ruleconstant_identifier=ruleconstant_identifier 
	 { $current=$iv_ruleconstant_identifier.current.getText(); }  
	 EOF 
;

// Rule constant_identifier
ruleconstant_identifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getConstant_identifierAccess().getIDENTIFIERTerminalRuleCall()); 
    }

    ;





// Entry rule entryRulevariable_identifier
entryRulevariable_identifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariable_identifierRule()); } 
	 iv_rulevariable_identifier=rulevariable_identifier 
	 { $current=$iv_rulevariable_identifier.current.getText(); }  
	 EOF 
;

// Rule variable_identifier
rulevariable_identifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getVariable_identifierAccess().getIDENTIFIERTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuletype_identifier
entryRuletype_identifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getType_identifierRule()); } 
	 iv_ruletype_identifier=ruletype_identifier 
	 { $current=$iv_ruletype_identifier.current.getText(); }  
	 EOF 
;

// Rule type_identifier
ruletype_identifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getType_identifierAccess().getIDENTIFIERTerminalRuleCall()); 
    }

    ;











// Entry rule entryRuleidentifier_list
entryRuleidentifier_list returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifier_listRule()); } 
	 iv_ruleidentifier_list=ruleidentifier_list 
	 { $current=$iv_ruleidentifier_list.current.getText(); }  
	 EOF 
;

// Rule identifier_list
ruleidentifier_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifier_listAccess().getIDENTIFIERTerminalRuleCall_0()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdentifier_listAccess().getCommaKeyword_1_0()); 
    }
    this_IDENTIFIER_2=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_2);
    }

    { 
    newLeafNode(this_IDENTIFIER_2, grammarAccess.getIdentifier_listAccess().getIDENTIFIERTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRulenumber
entryRulenumber returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); } 
	 iv_rulenumber=rulenumber 
	 { $current=$iv_rulenumber.current.getText(); }  
	 EOF 
;

// Rule number
rulenumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumberAccess().getInteger_numberParserRuleCall_0()); 
    }
    this_integer_number_0=ruleinteger_number    {
		$current.merge(this_integer_number_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberAccess().getReal_numberParserRuleCall_1()); 
    }
    this_real_number_1=rulereal_number    {
		$current.merge(this_real_number_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleinteger_number
entryRuleinteger_number returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInteger_numberRule()); } 
	 iv_ruleinteger_number=ruleinteger_number 
	 { $current=$iv_ruleinteger_number.current.getText(); }  
	 EOF 
;

// Rule integer_number
ruleinteger_number returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getInteger_numberAccess().getDigit_sequenceParserRuleCall()); 
    }
    this_digit_sequence_0=ruledigit_sequence    {
		$current.merge(this_digit_sequence_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulereal_number
entryRulereal_number returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getReal_numberRule()); } 
	 iv_rulereal_number=rulereal_number 
	 { $current=$iv_rulereal_number.current.getText(); }  
	 EOF 
;

// Rule real_number
rulereal_number returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getReal_numberAccess().getDigit_sequenceParserRuleCall_0_0()); 
    }
    this_digit_sequence_0=ruledigit_sequence    {
		$current.merge(this_digit_sequence_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReal_numberAccess().getFullStopKeyword_0_1()); 
    }
(    this_UNSIGNED_DIGIT_SEQUENCE_2=RULE_UNSIGNED_DIGIT_SEQUENCE    {
		$current.merge(this_UNSIGNED_DIGIT_SEQUENCE_2);
    }

    { 
    newLeafNode(this_UNSIGNED_DIGIT_SEQUENCE_2, grammarAccess.getReal_numberAccess().getUNSIGNED_DIGIT_SEQUENCETerminalRuleCall_0_2()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getReal_numberAccess().getScale_factorParserRuleCall_0_3()); 
    }
    this_scale_factor_3=rulescale_factor    {
		$current.merge(this_scale_factor_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getReal_numberAccess().getDigit_sequenceParserRuleCall_1_0()); 
    }
    this_digit_sequence_4=ruledigit_sequence    {
		$current.merge(this_digit_sequence_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getReal_numberAccess().getScale_factorParserRuleCall_1_1()); 
    }
    this_scale_factor_5=rulescale_factor    {
		$current.merge(this_scale_factor_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRulescale_factor
entryRulescale_factor returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getScale_factorRule()); } 
	 iv_rulescale_factor=rulescale_factor 
	 { $current=$iv_rulescale_factor.current.getText(); }  
	 EOF 
;

// Rule scale_factor
rulescale_factor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getScale_factorAccess().getEKeyword_0_0()); 
    }

    |
	kw='e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getScale_factorAccess().getEKeyword_0_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getScale_factorAccess().getDigit_sequenceParserRuleCall_1()); 
    }
    this_digit_sequence_2=ruledigit_sequence    {
		$current.merge(this_digit_sequence_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuledigit_sequence
entryRuledigit_sequence returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDigit_sequenceRule()); } 
	 iv_ruledigit_sequence=ruledigit_sequence 
	 { $current=$iv_ruledigit_sequence.current.getText(); }  
	 EOF 
;

// Rule digit_sequence
ruledigit_sequence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getDigit_sequenceAccess().getSignParserRuleCall_0()); 
    }
    this_sign_0=rulesign    {
		$current.merge(this_sign_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?    this_UNSIGNED_DIGIT_SEQUENCE_1=RULE_UNSIGNED_DIGIT_SEQUENCE    {
		$current.merge(this_UNSIGNED_DIGIT_SEQUENCE_1);
    }

    { 
    newLeafNode(this_UNSIGNED_DIGIT_SEQUENCE_1, grammarAccess.getDigit_sequenceAccess().getUNSIGNED_DIGIT_SEQUENCETerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRulesign
entryRulesign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignRule()); } 
	 iv_rulesign=rulesign 
	 { $current=$iv_rulesign.current.getText(); }  
	 EOF 
;

// Rule sign
rulesign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRulelabel
entryRulelabel returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabelRule()); } 
	 iv_rulelabel=rulelabel 
	 { $current=$iv_rulelabel.current.getText(); }  
	 EOF 
;

// Rule label
rulelabel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getLabelAccess().getInteger_numberParserRuleCall()); 
    }
    this_integer_number_0=ruleinteger_number    {
		$current.merge(this_integer_number_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleconstant
entryRuleconstant returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); } 
	 iv_ruleconstant=ruleconstant 
	 { $current=$iv_ruleconstant.current.getText(); }  
	 EOF 
;

// Rule constant
ruleconstant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getSignParserRuleCall_0_0()); 
    }
    this_sign_0=rulesign    {
		$current.merge(this_sign_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getConstant_identifierParserRuleCall_0_1_0()); 
    }
    this_constant_identifier_1=ruleconstant_identifier    {
		$current.merge(this_constant_identifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getNumberParserRuleCall_0_1_1()); 
    }
    this_number_2=rulenumber    {
		$current.merge(this_number_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    |    this_STRING_3=RULE_STRING    {
		$current.merge(this_STRING_3);
    }

    { 
    newLeafNode(this_STRING_3, grammarAccess.getConstantAccess().getSTRINGTerminalRuleCall_1()); 
    }
)
    ;





RULE_IDENTIFIER : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_UNSIGNED_DIGIT_SEQUENCE : '0'..'9' ('0'..'9')*;

RULE_LETTER : ('a'..'z'|'A'..'Z');

RULE_DIGIT : '0'..'9';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


