/**
 * generated by Xtext
 */
package org.xtext.example.mydsl.validation;

import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;
import org.xtext.example.mydsl.pascal.identifier_list;
import org.xtext.example.mydsl.pascal.variable_declaration;
import org.xtext.example.mydsl.pascal.variable_declaration_part;
import org.xtext.example.mydsl.validation.AbstractPascalValidator;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
@SuppressWarnings("all")
public class PascalValidator extends AbstractPascalValidator {
  @Check
  public void checkvariable_declaration_part(final variable_declaration_part declarations) {
    EList<variable_declaration> variableDeclarations = declarations.getVariableDeclarations();
    EList<String> variable_ids = null;
    for (int i = 0; (i < variableDeclarations.size()); i++) {
      {
        variable_declaration declaracao_atual = variableDeclarations.get(i);
        identifier_list _identifierList = declaracao_atual.getIdentifierList();
        EList<String> declaracao_atual_ids = _identifierList.getIds();
        for (int id_i = 0; (id_i < declaracao_atual_ids.size()); id_i++) {
          String _get = declaracao_atual_ids.get(id_i);
          boolean _contains = variable_ids.contains(_get);
          boolean _not = (!_contains);
          if (_not) {
            String _get_1 = declaracao_atual_ids.get(id_i);
            variable_ids.add(_get_1);
          } else {
            this.error("FERROU", null);
          }
        }
      }
    }
  }
}
