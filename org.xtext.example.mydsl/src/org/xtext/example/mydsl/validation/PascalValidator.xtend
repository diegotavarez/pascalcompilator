/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.validation

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.validation.Check
import org.xtext.example.mydsl.pascal.block
import org.xtext.example.mydsl.pascal.variable
import org.xtext.example.mydsl.pascal.variable_declaration_part

//import org.eclipse.xtext.validation.Check
/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class PascalValidator extends AbstractPascalValidator {

	@Check
	def checkvariable_unique_declaration(variable_declaration_part declarations) {
		val String[] variable_ids = newArrayOfSize(200)
		var variableDeclarations = declarations.variableDeclarations
		var id = 0

		for (var i = 0; i < variableDeclarations.size; i++) {
			var declaracao_atual = variableDeclarations.get(i);
			var declaracao_atual_ids = declaracao_atual.identifierList.ids;

			for (var id_i = 0; id_i < declaracao_atual_ids.size; id_i++) {
				if (!variable_ids.contains(declaracao_atual_ids.get(id_i))) {
					variable_ids.set(id, declaracao_atual_ids.get(id_i))
					id = id + 1

				} else {
					error("A variável " + declaracao_atual_ids.get(id_i) + " já foi declarada.", null)
				}
			}
		}
	}

	def searchVariableDeclaration(variable variable, EObject parent) {
		val name = variable.name
		if (parent == null) {
			return null
		} else if (!(parent instanceof block)) {
			searchVariableDeclaration(variable, parent.eContainer)
		} else {
			val block = parent as block
			val block_declaration_part = block.declarationPart
			val declarations = block_declaration_part.variableDeclarationPart

			val String[] variable_ids = newArrayOfSize(200)
			var variableDeclarations = declarations.variableDeclarations
			var id = 0

			for (var i = 0; i < variableDeclarations.size; i++) {
				var declaracao_atual = variableDeclarations.get(i);
				var declaracao_atual_ids = declaracao_atual.identifierList.ids;

				for (var id_i = 0; id_i < declaracao_atual_ids.size; id_i++) {
					if (!variable_ids.contains(declaracao_atual_ids.get(id_i))) {
						variable_ids.set(id, declaracao_atual_ids.get(id_i))
						id = id + 1

					}
				}
			}

			if (!variable_ids.contains(name) || variableDeclarations.size==0) {
				error("A variável " + name + " não foi declarada.", null)
			}
		}
	}
	
	@Check
	def checkVariableDeclaration(variable variable){
		searchVariableDeclaration(variable, variable.eContainer)
	}
	
//	def searchProcedureDeclaration(variable variable, EObject parent) {
//		val name = variable.name
//		if (parent == null) {
//			return null
//		} else if (!(parent instanceof block)) {
//			searchVariableDeclaration(variable, parent.eContainer)
//		} else {
//			val block = parent as block
//			val block_declaration_part = block.declarationPart
//			val declarations = block_declaration_part.variableDeclarationPart
//
//			val String[] variable_ids = newArrayOfSize(200)
//			var variableDeclarations = declarations.variableDeclarations
//			var id = 0
//
//			for (var i = 0; i < variableDeclarations.size; i++) {
//				var declaracao_atual = variableDeclarations.get(i);
//				var declaracao_atual_ids = declaracao_atual.identifierList.ids;
//
//				for (var id_i = 0; id_i < declaracao_atual_ids.size; id_i++) {
//					if (!variable_ids.contains(declaracao_atual_ids.get(id_i))) {
//						variable_ids.set(id, declaracao_atual_ids.get(id_i))
//						id = id + 1
//
//					}
//				}
//			}
//
//			if (!variable_ids.contains(name) || variableDeclarations.size==0) {
//				error("A variável " + name + " não foi declarada.", null)
//			}
//		}
//	}
//	
//	@Check
//	def checkProcedureDeclaration(variable variable){
//		searchProcedureDeclaration(variable, variable.eContainer)
//	}


}
