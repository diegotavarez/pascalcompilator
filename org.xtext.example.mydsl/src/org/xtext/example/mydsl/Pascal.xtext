grammar org.xtext.example.mydsl.Pascal with org.eclipse.xtext.common.Terminals

generate pascal "http://www.xtext.org/example/mydsl/Pascal"

Model:
	programs+=program*;

//PROGRAMS AND BLOCKS
program:
    heading = program_heading block=block progEnd=program_end;
program_heading:
	'program' programName=IDENTIFIER LEFT_PARENTHESIS  params=identifier_list RIGHT_PARENTHESIS SEMICOLON ;
program_end:
	value = DOT
;
	
block:
	declarationPart=DeclarationPart statementPart=statement_part;
	
	
DeclarationPart:
	labelDeclarationPart=label_declaration_part?
    constantDefinitionPart=constant_definition_part?
    typeDefinitionPart=type_definition_part?
    variableDeclarationPart=variable_declaration_part?
    procedureAndFunctionDeclarationPart=procedure_and_function_declaration_part;
    
    
label_declaration_part:
	'label' labels+=label (COMMA labels+=label)* SEMICOLON;
	
	
constant_definition_part:
	'const' constantDefinitions+=constant_definition SEMICOLON (constantDefinitions+=constant_definition SEMICOLON)*;
	
	
constant_definition:
	constantName=IDENTIFIER IG value=constant;
	
	
type_definition_part:
    'type' typeDefinitions+=type_definition SEMICOLON (typeDefinitions+=type_definition SEMICOLON)*;
    
    
type_definition:
	typeName=IDENTIFIER IG type=type;
	
	
variable_declaration_part:
    'var' variableDeclarations+=variable_declaration SEMICOLON (variableDeclarations+=variable_declaration SEMICOLON)*;
    
    
variable_declaration:
    identifierList=identifier_list COLON type=type;
    
    
procedure_and_function_declaration_part:
	{procedure_and_function_declaration_part}
    ( (procedureDeclarations+=procedure_declaration | functionDeclarations+=function_declaration) SEMICOLON )*;
    
    
procedure_declaration:
	heading=procedure_heading SEMICOLON (body=procedure_body | DIRECTIVE)
;    
    
function_declaration:
	{FunctionDeclarationWithHeading}
	heading=function_heading SEMICOLON (body=function_body | DIRECTIVE) |
	{FunctionDeclarationWithIdentification}
	heading=function_identification SEMICOLON body=function_body
;

function_identification:
	'function' functionName=function_identifier
;

function_body:
	block=block
;

procedure_body:
	block=block
;
    
statement_part:
	'begin' statement_sequence 'end';
	 

//PROCEDURE AND FUNCTION DEFINITIONS
procedure_heading:
	'procedure' procedureName=IDENTIFIER parameterList=formal_parameter_list?
;
   
function_heading:
    'function' id1=IDENTIFIER FormalParameterList=(formal_parameter_list)? COLON id2=IDENTIFIER;
	
formal_parameter_list:
    LEFT_PARENTHESIS FormalParameterSections+=formal_parameter_section (SEMICOLON FormalParameterSections+=formal_parameter_section)* RIGHT_PARENTHESIS;
    
    
formal_parameter_section:
    valueParameterSection=value_parameter_section |
    variableParamenterSection=variable_parameter_section |
    procedureHeading=procedure_heading |
    functionHeading=function_heading;
    
    
value_parameter_section:
    identifierList=identifier_list COLON parameterType=parameter_type;
    
    
variable_parameter_section:
    'var' identifierList=identifier_list COLON type=parameter_type;
    
    
parameter_type:
    type_identifier | conformant_array_schema;
    
    
conformant_array_schema:
    packed_conformant_array_schema |
    unpacked_conformant_array_schema;
    
    
unpacked_conformant_array_schema:
	'array' LEFT_BRACKETS boundEspecifications+=bound_especification (SEMICOLON boundEspecifications+=bound_especification)* RIGHT_BRACKETS 'of' (typeIdentifier=type_identifier | conformantArraySchema=conformant_array_schema)
;

packed_conformant_array_schema:
	'packed' 'array' LEFT_BRACKETS boundEspecification=bound_especification RIGHT_BRACKETS 'of' typeIdentifier=type_identifier
; 
    
bound_especification:
	IDENTIFIER DIAERESIS IDENTIFIER COLON ordinal_type_identifier 
;
ordinal_type_identifier:
	type_identifier
;

// STATEMENTS
statement_sequence:
    statements+=statement (SEMICOLON statements+=statement)*;
    
    
statement:
	(label=label COLON)?(simpleStatement=simple_statement | structuredStatement=structured_statement)
;	
	
simple_statement:
	{SimpleStamentClass}
	statement = (assignment_statement |  procedure_statement | goto_statement)?
;	
	
assignment_statement:
	variable=variable ASSIGNMENT_SIGN expression=expression
;
 
procedure_statement:
	procedureIdentifier=procedure_identifier actualParameterList=actual_parameter_list?
; 

actual_parameter_list:
	LEFT_PARENTHESIS actualParameters+=actual_parameter (COMMA actualParameters+=actual_parameter)* RIGHT_PARENTHESIS
;

actual_parameter:
	actual_value
;

actual_value:
	expression
;
    
goto_statement:
    'goto' label=label;
    
    
structured_statement:
    compound_statement |
    repetitive_statement |
    conditional_statement | 
    with_statement;
    
    
compound_statement:
    'begin' statementSequence=statement_sequence 'end';
    
    
repetitive_statement:
    while_statement |
    repeat_statement |
    for_statement;
    
    
while_statement:
    'while' expression=expression 'do' statement=statement;
    
    
repeat_statement:
    'repeat' statementSequence=statement_sequence 'until' expression=expression;
    
    
for_statement:
	'for' variableIdentifier=variable_identifier ASSIGNMENT_SIGN initialExpression=initial_expression diferenciador=('to'|'downto') finalExpression=final_expression 'do' statement=statement
;	

initial_expression:
	expression
;

final_expression:
	expression
;

conditional_statement:
    ifStatement=if_statement | caseStatement=case_statement;
    
    
if_statement:
    'if' expression=expression 'then' ifStatement=statement ('else' statementElse=statement)?;
    
    
case_statement:
    'case' expression=expression 'of' caseLimbs+=case_limb (SEMICOLON caseLimbs+=case_limb)* (SEMICOLON)? 'end';
    
    
case_limb:
    caseLabelList=case_label_list COLON statement=statement;
    
    
case_label_list:
    constants+=constant (COMMA constants+=constant)*;
    
    
with_statement:
	'with' recordVariables+=record_variable (COMMA recordVariables+=record_variable)* 'do' statement=statement
;   
 
record_variable:
	variable
;
  
//  EXPRESSIONS
expression:
	leftExpression=simple_expression (relOp=(RELATIONALOPERATOR| IG) rightExpression=simple_expression)?
;   
    
simple_expression:
	(sign=sign)? leftTerm=term (addOps+=(ADITION_OPERATOR|sign) rightTerms+=term)*
;  
    
term:
    factors+=factor (MULTIPLICATIONOPERATOR factors+=factor)*;
    
    
factor returns Factor:
	{factorVariable} varOrConst=variable |
	{factorInteger} sign=sign?value=digit_sequence |
	{factorReal} sign=sign?value=REAL_NUMBER |
	{factorString} value=STRING1 |
	{factorSet} value=Set |
	{factorNil} value = 'nil' |
	{factorFunctionDesignator} value = function_designator |
	{factorExpression} LEFT_PARENTHESIS value=expression RIGHT_PARENTHESIS |
	{notFactor} 'not' value=factor
;

    
variable:
    name=IDENTIFIER variableL=variable_l;
    
    
variable_l:
	{VariableLClass}
	(LEFT_BRACKETS expressionList=expression_list RIGHT_BRACKETS variableL=variable_l | DOT identifier=IDENTIFIER variableL=variable_l | CARET variableL=variable_l)?
;

expression_list:
	expressions+=expression (COMMA expressions+=expression)*
;
    
Set:
    LEFT_BRACKETS elementList=element_list RIGHT_BRACKETS;
    
    
element_list:
	expressions+=expression (COMMA expressions+=expression)*
;  
    
function_designator:
	functionIdentifier=function_identifier (actualParameterList=actual_parameter_list)
; 
    


//  TYPES
type:
    simpleType=simple_type |
    structuredType=structured_type |
    pointerType=pointer_type |
    type_identifier=type_identifier;
    
    
simple_type:
	subrange_type | enumerated_type
; 
    
enumerated_type:
    LEFT_PARENTHESIS identifierList=identifier_list RIGHT_PARENTHESIS;
    
    
subrange_type:
	lowerBound=lower_bound DIAERESIS upperBound=upper_bound
;
  
lower_bound:
	value=constant
;

upper_bound:
	value=constant
;


structured_type:
    ('packed')? unpackedStructuredType=unpacked_structured_type;
    
    
unpacked_structured_type:
    arrayType=array_type |
    recordType=record_type |
    setType=set_type |
    fileType=file_type;
    
    
array_type:
	'array' LEFT_BRACKETS indexTypes+=index_type (COMMA indexTypes+=index_type)* RIGHT_BRACKETS 'of' elementType=element_type
; 

index_type:
	simple_type
;

element_type:
	type
;
 
record_type:
	'record' fieldlist=field_list 'end';
	
	
set_type:
	'set' 'of' base_type
;

base_type:
	type
;	
	
file_type:
	'file' 'of' type=file_component_type;
file_component_type:
	type
;	
	
pointer_type:
	CARET pointerTypeName=type_identifier;
	
	
//RECORD FIELDS
field_list:
	{field_list}
    ( (fixedPart=fixed_part (SEMICOLON variantPart=variant_part)? | variantPart=variant_part ) SEMICOLON? )?;
    
    
fixed_part:
    recordSections+=record_section (SEMICOLON recordSections+=record_section)*;
    
    
record_section:
    identifierList=identifier_list COLON type=type;
    
    
variant_part:
    'case' tagfield=tag_field id=IDENTIFIER 'of' variants+=variant (SEMICOLON variants+=variant)*;
    
    
tag_field:
	(IDENTIFIER COLON)?
;
    
    
variant:
    caseLabelList=case_label_list COLON LEFT_PARENTHESIS fieldList=field_list RIGHT_PARENTHESIS;



//VARIABLE AND IDENTIFIER CATEGORIES
variable_identifier:
	identifier=IDENTIFIER
;
	
type_identifier:
	typeIdentifierName=IDENTIFIER;
	
procedure_identifier:
	IDENTIFIER;
	
function_identifier:
	identifier=IDENTIFIER;


//LOW LEVEL DEFINITIONS

identifier_list:
    ids+=IDENTIFIER (COMMA ids+=IDENTIFIER)*;
    
label:
    digit_sequence;
    
scale_factor:
	("E" | "e")digit_sequence;
	
terminal UNSIGNED_DIGIT_SEQUENCE:
	DIGIT+;
	
digit_sequence:
	sign=sign? value=UNSIGNED_DIGIT_SEQUENCE;
	
sign:
	'+' | '-';
	
constant:
	{ConstFromId} sign=sign?identifier=IDENTIFIER|
	{ConstFromDigitSequence} sign=sign?digitSequence=digit_sequence|
	{ConstFromReal} sign=sign?realNumber=REAL_NUMBER | 
	{ConstFromString} string=STRING1
; 
     
terminal RELATIONALOPERATOR:
    EQUALS_SIGN | DIFFERENT_SIGN | LESS_THAN_SIGN | LESS_OR_EQUALS_SIGN | GREATER_THAN_SIGN | GREATER_OR_EQUALS_SIGN | 'in';
    
terminal MULTIPLICATIONOPERATOR:
    MULTIP_SIGN | DIV_SIGN | 'div' | 'mod' | 'and';
    
REAL_NUMBER:
	digitSequence=digit_sequence DOT unsignedDigitSequence=UNSIGNED_DIGIT_SEQUENCE?scaleFactor=scale_factor? | (digitSequence=digit_sequence scaleFactor=scale_factor)
;    
terminal STRING1:
     ASPASSIMPLES ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* ASPASSIMPLES;

terminal DIRECTIVE:
	'forward'
;


//TERMINAIS
terminal fragment DIFFERENT_SIGN : "<>";
terminal fragment LESS_THAN_SIGN : "<";
terminal fragment LESS_OR_EQUALS_SIGN : "<=";
terminal fragment GREATER_THAN_SIGN : ">";
terminal fragment GREATER_OR_EQUALS_SIGN : ">=";

terminal fragment MULTIP_SIGN : "*";
terminal fragment DIV_SIGN : "/";
terminal SEMICOLON : ";";
terminal COMMA : ",";
terminal DOT : ".";
terminal COLON : ":";
terminal ASSIGNMENT_SIGN : ":=";
terminal ADITION_OPERATOR:
	'or'
;
terminal LEFT_PARENTHESIS : "(";
terminal RIGHT_PARENTHESIS : ")";
terminal LEFT_BRACKETS : "[";
terminal RIGHT_BRACKETS : "]";
terminal DIAERESIS : "..";
terminal CARET : "^";
terminal fragment ASPASSIMPLES : "'";
terminal fragment EQUALS_SIGN : "==";
terminal IG: "="; 
terminal LETTER:
	'A'..'Z' | 'a' .. 'z';
terminal DIGIT:
	'0'..'9';

terminal IDENTIFIER:
	LETTER ('_'|LETTER | DIGIT)*
;

terminal WS: 
    (' '|'\t'|'\r'|'\n')+;