grammar org.xtext.example.mydsl.Pascal with org.eclipse.xtext.common.Terminals

generate pascal "http://www.xtext.org/example/mydsl/Pascal"

Model:
	programs+=program*;
	
Greeting:
	'Hello' name=ID '!';

//PROGRAMS AND BLOCKS
program:
	program_heading block ".";
program_heading:
	'program' IDENTIFIER ("(" identifier_list ")")? ";";
block:
	declaration_part statement_part;
declaration_part:
(label_declaration_part)?
(constant_definition_part)?
(type_definition_part)?
(variable_declaration_part)?
procedure_and_function_declaration_part;

label_declaration_part:
	'label' label ("," label)* ";";
constant_definition_part:
	'const' constant_definition ";" (constant_definition ";")*;
constant_definition:
	IDENTIFIER "=" constant;
type_definition_part:
	'type' type_definition ";" (type_definition ";")*; 
type_definition:
	IDENTIFIER "=" type;
variable_declaration_part:
	'var' variable_declaration ";" (variable_declaration ";")*;
variable_declaration:
	identifier_list ":" type; 
procedure_and_function_declaration_part:
	(('procedure_declaration' | 'function_declaration') ";")*;
statement_part:
	'begin' statement_sequence 'end'; 

//STATEMENTS
statement_sequence:
	statement (statement)*;
statement:
	'statement' ";";

//EXPRESSIONS
relational_operator:
	"=" | "<>" | "<" | "<=" | ">" | ">=" | "in";
addition_operator:
	"+" | "-" | 'or';
multiplication_operator:
"*" | "/" | 'div' | 'mod' | 'and';
entire_variable:
	variable_identifier | field_identifier; 

//TYPES
type:
	'simple_type' | 'structured_type' | 'pointer_type' | 'type_identifier';	
enumerated_type:
	"(" identifier_list ")"; 

//VARIABLE AND IDENTIFIER CATEGORIES
terminal IDENTIFIER: (('a'..'z')|('A'..'Z')|'_') (('a'..'z')|('A'..'Z')|'_'|('0'..'9'))*;
identifier2:
	LETTER (LETTER | DIGIT)*;
field_identifier:
	IDENTIFIER;
constant_identifier:
	IDENTIFIER;
variable_identifier:
	IDENTIFIER;
type_identifier:
	IDENTIFIER;
procedure_identifier:
	IDENTIFIER;
function_identifier:
	IDENTIFIER;
bound_identifier:
	IDENTIFIER;

//LOW LEVEL DEFINITIONS
identifier_list:
	IDENTIFIER ("," IDENTIFIER)*;
number:
	integer_number | real_number;
integer_number:
	digit_sequence;
real_number:
	digit_sequence "." (unsigned_digit_sequence)? (scale_factor) | digit_sequence scale_factor;
scale_factor:
	("E" | "e")digit_sequence;
unsigned_digit_sequence:
	DIGIT (DIGIT)*;
digit_sequence:
	(sign)? unsigned_digit_sequence;
sign:
	'+' | '-';
terminal LETTER:
	('a'..'z')|('A'..'Z');
terminal DIGIT:
	('0'..'9');
label:
	integer_number;
constant:
	(sign)? (constant_identifier | number) | STRING;