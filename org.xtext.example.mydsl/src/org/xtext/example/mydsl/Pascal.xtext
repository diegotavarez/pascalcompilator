grammar org.xtext.example.mydsl.Pascal with org.eclipse.xtext.common.Terminals

generate pascal "http://www.xtext.org/example/mydsl/Pascal"

Model:
	programs+=program*;

//PROGRAMS AND BLOCKS
program:
	program_heading block ".";
program_heading:
	'program' IDENTIFIER ("(" identifier_list ")")? ";";
block:
	declaration_part statement_part;
declaration_part:
	(label_declaration_part)? (constant_definition_part)? (type_definition_part)? (variable_declaration_part)? procedure_and_function_declaration_part;
label_declaration_part:
	'label' label ("," label)* ";";
constant_definition_part:
	'const' constant_definition ";" (constant_definition ";")*;
constant_definition:
	IDENTIFIER "=" constant;
type_definition_part:
	'type' type_definition ";" (type_definition ";")*; 
type_definition:
	IDENTIFIER "=" type;
variable_declaration_part:
	'var' variable_declaration ";" (variable_declaration ";")*;
variable_declaration:
	identifier_list ":" type; 
procedure_and_function_declaration_part:
	(('procedure_declaration' | 'function_declaration') ";")*;
statement_part:
	'begin' statement_sequence 'end'; 

//STATEMENTS
statement_sequence:
	statement (statement)*;
statement:
	'statement' ";";
case_label_list:
	constant ("," constant)*;

//EXPRESSIONS
relational_operator:
	"=" | "<>" | "<" | "<=" | ">" | ">=" | "in";
addition_operator:
	"+" | "-" | 'or';
multiplication_operator:
"*" | "/" | 'div' | 'mod' | 'and';
entire_variable:
	variable_identifier | field_identifier; 

//TYPES
type:
	simple_type | structured_type | pointer_type | type_identifier | 'TESTE';
simple_type:
	subrange_type | enumerated_type;
enumerated_type:
	"(" identifier_list ")"; 
subrange_type:
	lower_bound ".." upper_bound;
lower_bound:
	constant;
upper_bound:
	constant;
structured_type:
	('packed')? unpacked_structured_type;
unpacked_structured_type:
	array_type | record_type | set_type | file_type;
array_type:
	'array' "[ " index_type ("," index_type)* " ]" 'of' element_type;
index_type:
	simple_type;
element_type:
	type;  
record_type:
	'record' field_list 'end';
set_type:
	'set' 'of' base_type;
base_type:
	type;
file_type:
	'file' 'of' file_component_type;
file_component_type:
	type;
pointer_type:
"^" type_identifier;
	
//RECORD FIELDS
field_list:
	((fixed_part (";" variant_part)? | variant_part) (";")?)?;
fixed_part:
	record_section (";" record_section)*;
record_section:
	identifier_list ":" type;
variant_part:
	'case' tag_field type_identifier 'of' variant (";" variant)*;
tag_field:
	(IDENTIFIER ":")?;
variant:
	case_label_list ":" "(" field_list ")";  

//VARIABLE AND IDENTIFIER CATEGORIES
terminal IDENTIFIER: (('a'..'z')|('A'..'Z')|'_') (('a'..'z')|('A'..'Z')|'_'|('0'..'9'))*;
identifier2:
	LETTER (LETTER | DIGIT)*;
field_identifier:
	IDENTIFIER;
constant_identifier:
	IDENTIFIER;
variable_identifier:
	IDENTIFIER;
type_identifier:
	IDENTIFIER;
procedure_identifier:
	IDENTIFIER;
function_identifier:
	IDENTIFIER;
bound_identifier:
	IDENTIFIER;

//LOW LEVEL DEFINITIONS
identifier_list:
	IDENTIFIER ("," IDENTIFIER)*;
number:
	integer_number | real_number;
integer_number:
	digit_sequence;
real_number:
	digit_sequence "." (UNSIGNED_DIGIT_SEQUENCE)? (scale_factor) | digit_sequence scale_factor;
scale_factor:
	("E" | "e")digit_sequence;
terminal UNSIGNED_DIGIT_SEQUENCE:
	('0'..'9') ('0'..'9')*;
digit_sequence:
	(sign)? UNSIGNED_DIGIT_SEQUENCE;
sign:
	'+' | '-';
terminal LETTER:
	('a'..'z')|('A'..'Z');
terminal DIGIT:
	('0'..'9');
label:
	integer_number;
constant:
	(sign)? (constant_identifier | number) | STRING;